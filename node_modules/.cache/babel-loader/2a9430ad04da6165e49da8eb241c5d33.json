{"ast":null,"code":"import { Row } from './../models/row';\nimport { CellType } from '../base/enum';\nimport { isNullOrUndefined, Internationalization, getValue, createElement } from '@syncfusion/ej2-base';\nimport { Cell } from '../models/cell';\nimport { ValueFormatter } from './../services/value-formatter';\nimport { Query, DataManager } from '@syncfusion/ej2-data';\nimport { getForeignData, measureColumnDepth, getUid } from '../base/util';\nimport { Grid } from '../base/grid';\n/**\n * @hidden\n * `ExportHelper` for `PdfExport` & `ExcelExport`\n */\n\nvar ExportHelper =\n/** @class */\nfunction () {\n  function ExportHelper(parent) {\n    this.hideColumnInclude = false;\n    this.foreignKeyData = {};\n    this.parent = parent;\n  }\n\n  ExportHelper.getQuery = function (parent, data) {\n    return data.isRemote() ? data.generateQuery(true).requiresCount().take(parent.pageSettings.totalRecordsCount) : data.generateQuery(true).requiresCount();\n  };\n\n  ExportHelper.prototype.getFData = function (value, column) {\n    var foreignKeyData = getForeignData(column, {}, value, this.foreignKeyData[column.field])[0];\n    return foreignKeyData;\n  };\n\n  ExportHelper.prototype.getGridRowModel = function (columns, dataSource, gObj, startIndex) {\n    if (startIndex === void 0) {\n      startIndex = 0;\n    }\n\n    var rows = [];\n    var length = dataSource.length;\n\n    if (length) {\n      for (var i = 0; i < length; i++, startIndex++) {\n        var options = {\n          isExpand: false\n        };\n        options.data = dataSource[i];\n        options.index = startIndex;\n\n        if (gObj.childGrid) {\n          if (gObj.hierarchyPrintMode === 'All') {\n            options.isExpand = true;\n          } else if (gObj.hierarchyPrintMode === 'Expanded' && this.parent.expandedRows && this.parent.expandedRows[startIndex]) {\n            options.isExpand = gObj.expandedRows[startIndex].isExpand;\n          }\n        }\n\n        var row = new Row(options);\n        row.cells = this.generateCells(columns, gObj);\n        rows.push(row);\n      }\n\n      this.processColumns(rows);\n    }\n\n    return rows;\n  };\n\n  ExportHelper.prototype.generateCells = function (columns, gObj) {\n    var cells = [];\n\n    if (gObj.childGridLevel) {\n      var len = gObj.childGridLevel;\n\n      for (var i = 0; len > i; i++) {\n        cells.push(this.generateCell({}, CellType.Indent));\n      }\n    }\n\n    for (var _i = 0, columns_1 = columns; _i < columns_1.length; _i++) {\n      var col = columns_1[_i];\n      cells.push(this.generateCell(col, CellType.Data));\n    }\n\n    return cells;\n  };\n\n  ExportHelper.prototype.getColumnData = function (gridObj) {\n    var _this = this;\n\n    var columnPromise = [];\n    var promise;\n    var fColumns = gridObj.getForeignKeyColumns();\n\n    if (fColumns.length) {\n      for (var i = 0; i < fColumns.length; i++) {\n        var colData = 'result' in fColumns[i].dataSource ? new DataManager(fColumns[i].dataSource.result) : fColumns[i].dataSource;\n        columnPromise.push(colData.executeQuery(new Query()));\n      }\n\n      promise = Promise.all(columnPromise).then(function (e) {\n        for (var j = 0; j < fColumns.length; j++) {\n          _this.foreignKeyData[fColumns[j].field] = e[j].result;\n        } // tslint:disable-next-line:no-any\n\n      });\n    }\n\n    return promise;\n  };\n\n  ExportHelper.prototype.getHeaders = function (columns, isHideColumnInclude) {\n    if (isHideColumnInclude) {\n      this.hideColumnInclude = true;\n    } else {\n      this.hideColumnInclude = false;\n    }\n\n    this.colDepth = measureColumnDepth(columns);\n    var rows = [];\n\n    for (var i = 0; i < this.colDepth; i++) {\n      rows[i] = new Row({});\n      rows[i].cells = [];\n    }\n\n    rows = this.processColumns(rows);\n    rows = this.processHeaderCells(rows, columns);\n    return {\n      rows: rows,\n      columns: this.generateActualColumns(columns)\n    };\n  };\n\n  ExportHelper.prototype.getConvertedWidth = function (input) {\n    var value = parseFloat(input);\n    return input.indexOf('%') !== -1 ? this.parent.element.getBoundingClientRect().width * value / 100 : value;\n  };\n\n  ExportHelper.prototype.generateActualColumns = function (columns, actualColumns) {\n    if (actualColumns === void 0) {\n      actualColumns = [];\n    }\n\n    for (var _i = 0, columns_2 = columns; _i < columns_2.length; _i++) {\n      var column = columns_2[_i];\n\n      if (column.commands) {\n        continue;\n      }\n\n      if (!column.columns) {\n        if (column.visible || this.hideColumnInclude) {\n          actualColumns.push(column);\n        }\n      } else {\n        if (column.visible || this.hideColumnInclude) {\n          var colSpan = this.getCellCount(column, 0);\n\n          if (colSpan !== 0) {\n            this.generateActualColumns(column.columns, actualColumns);\n          }\n        }\n      }\n    }\n\n    return actualColumns;\n  };\n\n  ExportHelper.prototype.processHeaderCells = function (rows, cols) {\n    var columns = cols;\n\n    for (var i = 0; i < columns.length; i++) {\n      if (!columns[i].commands) {\n        rows = this.appendGridCells(columns[i], rows, 0);\n      }\n    }\n\n    return rows;\n  };\n\n  ExportHelper.prototype.appendGridCells = function (cols, gridRows, index) {\n    if (!cols.columns && (cols.visible !== false || this.hideColumnInclude) && !cols.commands) {\n      gridRows[index].cells.push(this.generateCell(cols, CellType.Header, this.colDepth - index, index));\n    } else if (cols.columns) {\n      var colSpan = this.getCellCount(cols, 0);\n\n      if (colSpan) {\n        gridRows[index].cells.push(new Cell({\n          cellType: CellType.StackedHeader,\n          column: cols,\n          colSpan: colSpan\n        }));\n      }\n\n      var isIgnoreFirstCell = void 0;\n\n      for (var i = 0, len = cols.columns.length; i < len; i++) {\n        if (cols.columns[i].visible && !isIgnoreFirstCell) {\n          isIgnoreFirstCell = true;\n        }\n\n        gridRows = this.appendGridCells(cols.columns[i], gridRows, index + 1);\n      }\n    }\n\n    return gridRows;\n  };\n\n  ExportHelper.prototype.generateCell = function (gridColumn, cellType, rowSpan, rowIndex) {\n    var option = {\n      'visible': gridColumn.visible,\n      'isDataCell': cellType === CellType.Data,\n      'column': gridColumn,\n      'cellType': cellType,\n      'rowSpan': rowSpan,\n      'index': rowIndex\n    };\n\n    if (!option.rowSpan || option.rowSpan < 2) {\n      delete option.rowSpan;\n    }\n\n    return new Cell(option);\n  };\n\n  ExportHelper.prototype.processColumns = function (rows) {\n    //TODO: generate dummy column for group, detail, stacked row here; ensureColumns here\n    var gridObj = this.parent;\n    var columnIndexes = [];\n\n    if (gridObj.enableColumnVirtualization) {\n      columnIndexes = gridObj.getColumnIndexesInView();\n    }\n\n    for (var i = 0, len = rows.length; i < len; i++) {\n      if (gridObj.allowGrouping) {\n        for (var j = 0, len_1 = gridObj.groupSettings.columns.length; j < len_1; j++) {\n          if (gridObj.enableColumnVirtualization && columnIndexes.indexOf(j) === -1) {\n            continue;\n          }\n\n          rows[i].cells.splice(0, 0, this.generateCell({}, CellType.HeaderIndent));\n        }\n      }\n    }\n\n    return rows;\n  };\n\n  ExportHelper.prototype.getCellCount = function (column, count) {\n    if (column.columns) {\n      for (var i = 0; i < column.columns.length; i++) {\n        count = this.getCellCount(column.columns[i], count);\n      }\n    } else {\n      if (column.visible || this.hideColumnInclude) {\n        count++;\n      }\n    }\n\n    return count;\n  };\n\n  ExportHelper.prototype.checkAndExport = function (gridPool, globalResolve) {\n    var bool = Object.keys(gridPool).some(function (key) {\n      return !gridPool[key];\n    });\n\n    if (!bool) {\n      globalResolve();\n    }\n  };\n\n  ExportHelper.prototype.failureHandler = function (gridPool, childGridObj, resolve) {\n    var _this = this;\n\n    return function () {\n      gridPool[childGridObj.id] = true;\n\n      _this.checkAndExport(gridPool, resolve);\n    };\n  }; // tslint:disable-next-line:no-any\n\n\n  ExportHelper.prototype.createChildGrid = function (gObj, row, exportType, gridPool) {\n    var childGridObj = new Grid(this.parent.detailRowModule.getGridModel(gObj, row, exportType));\n    gObj.isPrinting = false;\n    var parent = 'parentDetails';\n    childGridObj[parent] = {\n      parentID: gObj.element.id,\n      parentPrimaryKeys: gObj.getPrimaryKeyFieldNames(),\n      parentKeyField: gObj.childGrid.queryString,\n      parentKeyFieldValue: getValue(childGridObj.queryString, row.data),\n      parentRowData: row.data\n    };\n    var exportId = getUid('child-grid');\n    var element = createElement('div', {\n      id: exportId,\n      styles: 'display: none'\n    });\n    document.body.appendChild(element);\n    childGridObj.id = exportId;\n    gridPool[exportId] = false;\n    return {\n      childGrid: childGridObj,\n      element: element\n    };\n  };\n\n  ExportHelper.prototype.getGridExportColumns = function (columns) {\n    var actualGridColumns = [];\n\n    for (var i = 0, gridColumns = columns; i < gridColumns.length; i++) {\n      if (gridColumns[i].type !== 'checkbox') {\n        actualGridColumns.push(gridColumns[i]);\n      }\n    }\n\n    return actualGridColumns;\n  };\n\n  return ExportHelper;\n}();\n\nexport { ExportHelper };\n/**\n * @hidden\n * `ExportValueFormatter` for `PdfExport` & `ExcelExport`\n */\n\nvar ExportValueFormatter =\n/** @class */\nfunction () {\n  function ExportValueFormatter(culture) {\n    this.valueFormatter = new ValueFormatter(culture);\n    this.internationalization = new Internationalization(culture);\n  }\n  /* tslint:disable-next-line:no-any */\n\n\n  ExportValueFormatter.prototype.returnFormattedValue = function (args, customFormat) {\n    if (!isNullOrUndefined(args.value) && args.value) {\n      return this.valueFormatter.getFormatFunction(customFormat)(args.value);\n    } else {\n      return '';\n    }\n  };\n  /* tslint:disable-next-line:no-any */\n\n\n  ExportValueFormatter.prototype.formatCellValue = function (args, isServerBlaz) {\n    if (args.isForeignKey) {\n      args.value = getValue(args.column.foreignKeyValue, getForeignData(args.column, {}, args.value)[0]);\n    }\n\n    if (args.column.type === 'number' && args.column.format !== undefined && args.column.format !== '') {\n      return args.value ? this.internationalization.getNumberFormat({\n        format: args.column.format\n      })(args.value) : '';\n    } else if (args.column.type === 'boolean') {\n      return args.value ? 'true' : 'false';\n      /* tslint:disable-next-line:max-line-length */\n    } else if ((args.column.type === 'date' || args.column.type === 'datetime' || args.column.type === 'time') && args.column.format !== undefined) {\n      if (typeof args.value === 'string') {\n        args.value = new Date(args.value);\n      }\n\n      if (typeof args.column.format === 'string') {\n        var format = void 0;\n        var cFormat = args.column.format;\n\n        if (args.column.type === 'date') {\n          format = isServerBlaz ? {\n            type: 'date',\n            format: cFormat\n          } : {\n            type: 'date',\n            skeleton: cFormat\n          };\n        } else if (args.column.type === 'time') {\n          format = isServerBlaz ? {\n            type: 'time',\n            format: cFormat\n          } : {\n            type: 'time',\n            skeleton: cFormat\n          };\n        } else {\n          format = isServerBlaz ? {\n            type: 'dateTime',\n            format: cFormat\n          } : {\n            type: 'dateTime',\n            skeleton: cFormat\n          };\n        }\n\n        return this.returnFormattedValue(args, format);\n      } else {\n        if (args.column.format instanceof Object && args.column.format.type === undefined) {\n          return args.value.toString();\n        } else {\n          /* tslint:disable-next-line:max-line-length */\n          var customFormat = void 0;\n\n          if (args.column.type === 'date') {\n            /* tslint:disable-next-line:max-line-length */\n            customFormat = {\n              type: args.column.format.type,\n              format: args.column.format.format,\n              skeleton: args.column.format.skeleton\n            };\n          } else if (args.column.type === 'time') {\n            customFormat = {\n              type: 'time',\n              format: args.column.format.format,\n              skeleton: args.column.format.skeleton\n            };\n          } else {\n            customFormat = {\n              type: 'dateTime',\n              format: args.column.format.format,\n              skeleton: args.column.format.skeleton\n            };\n          }\n\n          return this.returnFormattedValue(args, customFormat);\n        }\n      }\n    } else {\n      if (!isNullOrUndefined(args.column.type) && !isNullOrUndefined(args.value) || !isNullOrUndefined(args.value)) {\n        return args.value.toString();\n      } else {\n        return '';\n      }\n    }\n  };\n\n  return ExportValueFormatter;\n}();\n\nexport { ExportValueFormatter };","map":{"version":3,"sources":["/home/nikhil/Desktop/data_grid_editor-master/node_modules/@syncfusion/ej2-grids/src/grid/actions/export-helper.js"],"names":["Row","CellType","isNullOrUndefined","Internationalization","getValue","createElement","Cell","ValueFormatter","Query","DataManager","getForeignData","measureColumnDepth","getUid","Grid","ExportHelper","parent","hideColumnInclude","foreignKeyData","getQuery","data","isRemote","generateQuery","requiresCount","take","pageSettings","totalRecordsCount","prototype","getFData","value","column","field","getGridRowModel","columns","dataSource","gObj","startIndex","rows","length","i","options","isExpand","index","childGrid","hierarchyPrintMode","expandedRows","row","cells","generateCells","push","processColumns","childGridLevel","len","generateCell","Indent","_i","columns_1","col","Data","getColumnData","gridObj","_this","columnPromise","promise","fColumns","getForeignKeyColumns","colData","result","executeQuery","Promise","all","then","e","j","getHeaders","isHideColumnInclude","colDepth","processHeaderCells","generateActualColumns","getConvertedWidth","input","parseFloat","indexOf","element","getBoundingClientRect","width","actualColumns","columns_2","commands","visible","colSpan","getCellCount","cols","appendGridCells","gridRows","Header","cellType","StackedHeader","isIgnoreFirstCell","gridColumn","rowSpan","rowIndex","option","columnIndexes","enableColumnVirtualization","getColumnIndexesInView","allowGrouping","len_1","groupSettings","splice","HeaderIndent","count","checkAndExport","gridPool","globalResolve","bool","Object","keys","some","key","failureHandler","childGridObj","resolve","id","createChildGrid","exportType","detailRowModule","getGridModel","isPrinting","parentID","parentPrimaryKeys","getPrimaryKeyFieldNames","parentKeyField","queryString","parentKeyFieldValue","parentRowData","exportId","styles","document","body","appendChild","getGridExportColumns","actualGridColumns","gridColumns","type","ExportValueFormatter","culture","valueFormatter","internationalization","returnFormattedValue","args","customFormat","getFormatFunction","formatCellValue","isServerBlaz","isForeignKey","foreignKeyValue","format","undefined","getNumberFormat","Date","cFormat","skeleton","toString"],"mappings":"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","sourcesContent":["import { Row } from './../models/row';\nimport { CellType } from '../base/enum';\nimport { isNullOrUndefined, Internationalization, getValue, createElement } from '@syncfusion/ej2-base';\nimport { Cell } from '../models/cell';\nimport { ValueFormatter } from './../services/value-formatter';\nimport { Query, DataManager } from '@syncfusion/ej2-data';\nimport { getForeignData, measureColumnDepth, getUid } from '../base/util';\nimport { Grid } from '../base/grid';\n/**\n * @hidden\n * `ExportHelper` for `PdfExport` & `ExcelExport`\n */\nvar ExportHelper = /** @class */ (function () {\n    function ExportHelper(parent) {\n        this.hideColumnInclude = false;\n        this.foreignKeyData = {};\n        this.parent = parent;\n    }\n    ExportHelper.getQuery = function (parent, data) {\n        return data.isRemote() ?\n            data.generateQuery(true).requiresCount().take(parent.pageSettings.totalRecordsCount) :\n            data.generateQuery(true).requiresCount();\n    };\n    ExportHelper.prototype.getFData = function (value, column) {\n        var foreignKeyData = getForeignData(column, {}, value, this.foreignKeyData[column.field])[0];\n        return foreignKeyData;\n    };\n    ExportHelper.prototype.getGridRowModel = function (columns, dataSource, gObj, startIndex) {\n        if (startIndex === void 0) { startIndex = 0; }\n        var rows = [];\n        var length = dataSource.length;\n        if (length) {\n            for (var i = 0; i < length; i++, startIndex++) {\n                var options = { isExpand: false };\n                options.data = dataSource[i];\n                options.index = startIndex;\n                if (gObj.childGrid) {\n                    if (gObj.hierarchyPrintMode === 'All') {\n                        options.isExpand = true;\n                    }\n                    else if (gObj.hierarchyPrintMode === 'Expanded' &&\n                        this.parent.expandedRows && this.parent.expandedRows[startIndex]) {\n                        options.isExpand = gObj.expandedRows[startIndex].isExpand;\n                    }\n                }\n                var row = new Row(options);\n                row.cells = this.generateCells(columns, gObj);\n                rows.push(row);\n            }\n            this.processColumns(rows);\n        }\n        return rows;\n    };\n    ExportHelper.prototype.generateCells = function (columns, gObj) {\n        var cells = [];\n        if (gObj.childGridLevel) {\n            var len = gObj.childGridLevel;\n            for (var i = 0; len > i; i++) {\n                cells.push(this.generateCell({}, CellType.Indent));\n            }\n        }\n        for (var _i = 0, columns_1 = columns; _i < columns_1.length; _i++) {\n            var col = columns_1[_i];\n            cells.push(this.generateCell(col, CellType.Data));\n        }\n        return cells;\n    };\n    ExportHelper.prototype.getColumnData = function (gridObj) {\n        var _this = this;\n        var columnPromise = [];\n        var promise;\n        var fColumns = gridObj.getForeignKeyColumns();\n        if (fColumns.length) {\n            for (var i = 0; i < fColumns.length; i++) {\n                var colData = ('result' in fColumns[i].dataSource) ?\n                    new DataManager(fColumns[i].dataSource.result) :\n                    fColumns[i].dataSource;\n                columnPromise.push(colData.executeQuery(new Query()));\n            }\n            promise = Promise.all(columnPromise).then(function (e) {\n                for (var j = 0; j < fColumns.length; j++) {\n                    _this.foreignKeyData[fColumns[j].field] = e[j].result;\n                }\n                // tslint:disable-next-line:no-any\n            });\n        }\n        return promise;\n    };\n    ExportHelper.prototype.getHeaders = function (columns, isHideColumnInclude) {\n        if (isHideColumnInclude) {\n            this.hideColumnInclude = true;\n        }\n        else {\n            this.hideColumnInclude = false;\n        }\n        this.colDepth = measureColumnDepth(columns);\n        var rows = [];\n        for (var i = 0; i < this.colDepth; i++) {\n            rows[i] = new Row({});\n            rows[i].cells = [];\n        }\n        rows = this.processColumns(rows);\n        rows = this.processHeaderCells(rows, columns);\n        return { rows: rows, columns: this.generateActualColumns(columns) };\n    };\n    ExportHelper.prototype.getConvertedWidth = function (input) {\n        var value = parseFloat(input);\n        return (input.indexOf('%') !== -1) ? (this.parent.element.getBoundingClientRect().width * value / 100) : value;\n    };\n    ExportHelper.prototype.generateActualColumns = function (columns, actualColumns) {\n        if (actualColumns === void 0) { actualColumns = []; }\n        for (var _i = 0, columns_2 = columns; _i < columns_2.length; _i++) {\n            var column = columns_2[_i];\n            if (column.commands) {\n                continue;\n            }\n            if (!column.columns) {\n                if (column.visible || this.hideColumnInclude) {\n                    actualColumns.push(column);\n                }\n            }\n            else {\n                if (column.visible || this.hideColumnInclude) {\n                    var colSpan = this.getCellCount(column, 0);\n                    if (colSpan !== 0) {\n                        this.generateActualColumns(column.columns, actualColumns);\n                    }\n                }\n            }\n        }\n        return actualColumns;\n    };\n    ExportHelper.prototype.processHeaderCells = function (rows, cols) {\n        var columns = cols;\n        for (var i = 0; i < columns.length; i++) {\n            if (!columns[i].commands) {\n                rows = this.appendGridCells(columns[i], rows, 0);\n            }\n        }\n        return rows;\n    };\n    ExportHelper.prototype.appendGridCells = function (cols, gridRows, index) {\n        if (!cols.columns && (cols.visible !== false || this.hideColumnInclude) && !cols.commands) {\n            gridRows[index].cells.push(this.generateCell(cols, CellType.Header, this.colDepth - index, index));\n        }\n        else if (cols.columns) {\n            var colSpan = this.getCellCount(cols, 0);\n            if (colSpan) {\n                gridRows[index].cells.push(new Cell({\n                    cellType: CellType.StackedHeader, column: cols, colSpan: colSpan\n                }));\n            }\n            var isIgnoreFirstCell = void 0;\n            for (var i = 0, len = cols.columns.length; i < len; i++) {\n                if (cols.columns[i].visible && !isIgnoreFirstCell) {\n                    isIgnoreFirstCell = true;\n                }\n                gridRows = this.appendGridCells(cols.columns[i], gridRows, index + 1);\n            }\n        }\n        return gridRows;\n    };\n    ExportHelper.prototype.generateCell = function (gridColumn, cellType, rowSpan, rowIndex) {\n        var option = {\n            'visible': gridColumn.visible,\n            'isDataCell': cellType === CellType.Data,\n            'column': gridColumn,\n            'cellType': cellType,\n            'rowSpan': rowSpan,\n            'index': rowIndex\n        };\n        if (!option.rowSpan || option.rowSpan < 2) {\n            delete option.rowSpan;\n        }\n        return new Cell(option);\n    };\n    ExportHelper.prototype.processColumns = function (rows) {\n        //TODO: generate dummy column for group, detail, stacked row here; ensureColumns here\n        var gridObj = this.parent;\n        var columnIndexes = [];\n        if (gridObj.enableColumnVirtualization) {\n            columnIndexes = gridObj.getColumnIndexesInView();\n        }\n        for (var i = 0, len = rows.length; i < len; i++) {\n            if (gridObj.allowGrouping) {\n                for (var j = 0, len_1 = gridObj.groupSettings.columns.length; j < len_1; j++) {\n                    if (gridObj.enableColumnVirtualization && columnIndexes.indexOf(j) === -1) {\n                        continue;\n                    }\n                    rows[i].cells.splice(0, 0, this.generateCell({}, CellType.HeaderIndent));\n                }\n            }\n        }\n        return rows;\n    };\n    ExportHelper.prototype.getCellCount = function (column, count) {\n        if (column.columns) {\n            for (var i = 0; i < column.columns.length; i++) {\n                count = this.getCellCount(column.columns[i], count);\n            }\n        }\n        else {\n            if (column.visible || this.hideColumnInclude) {\n                count++;\n            }\n        }\n        return count;\n    };\n    ExportHelper.prototype.checkAndExport = function (gridPool, globalResolve) {\n        var bool = Object.keys(gridPool).some(function (key) {\n            return !gridPool[key];\n        });\n        if (!bool) {\n            globalResolve();\n        }\n    };\n    ExportHelper.prototype.failureHandler = function (gridPool, childGridObj, resolve) {\n        var _this = this;\n        return function () {\n            gridPool[childGridObj.id] = true;\n            _this.checkAndExport(gridPool, resolve);\n        };\n    };\n    // tslint:disable-next-line:no-any\n    ExportHelper.prototype.createChildGrid = function (gObj, row, exportType, gridPool) {\n        var childGridObj = new Grid(this.parent.detailRowModule.getGridModel(gObj, row, exportType));\n        gObj.isPrinting = false;\n        var parent = 'parentDetails';\n        childGridObj[parent] = {\n            parentID: gObj.element.id,\n            parentPrimaryKeys: gObj.getPrimaryKeyFieldNames(),\n            parentKeyField: gObj.childGrid.queryString,\n            parentKeyFieldValue: getValue(childGridObj.queryString, row.data),\n            parentRowData: row.data\n        };\n        var exportId = getUid('child-grid');\n        var element = createElement('div', {\n            id: exportId, styles: 'display: none'\n        });\n        document.body.appendChild(element);\n        childGridObj.id = exportId;\n        gridPool[exportId] = false;\n        return { childGrid: childGridObj, element: element };\n    };\n    ExportHelper.prototype.getGridExportColumns = function (columns) {\n        var actualGridColumns = [];\n        for (var i = 0, gridColumns = columns; i < gridColumns.length; i++) {\n            if (gridColumns[i].type !== 'checkbox') {\n                actualGridColumns.push(gridColumns[i]);\n            }\n        }\n        return actualGridColumns;\n    };\n    return ExportHelper;\n}());\nexport { ExportHelper };\n/**\n * @hidden\n * `ExportValueFormatter` for `PdfExport` & `ExcelExport`\n */\nvar ExportValueFormatter = /** @class */ (function () {\n    function ExportValueFormatter(culture) {\n        this.valueFormatter = new ValueFormatter(culture);\n        this.internationalization = new Internationalization(culture);\n    }\n    /* tslint:disable-next-line:no-any */\n    ExportValueFormatter.prototype.returnFormattedValue = function (args, customFormat) {\n        if (!isNullOrUndefined(args.value) && args.value) {\n            return this.valueFormatter.getFormatFunction(customFormat)(args.value);\n        }\n        else {\n            return '';\n        }\n    };\n    /* tslint:disable-next-line:no-any */\n    ExportValueFormatter.prototype.formatCellValue = function (args, isServerBlaz) {\n        if (args.isForeignKey) {\n            args.value = getValue(args.column.foreignKeyValue, getForeignData(args.column, {}, args.value)[0]);\n        }\n        if (args.column.type === 'number' && args.column.format !== undefined && args.column.format !== '') {\n            return args.value ? this.internationalization.getNumberFormat({ format: args.column.format })(args.value) : '';\n        }\n        else if (args.column.type === 'boolean') {\n            return args.value ? 'true' : 'false';\n            /* tslint:disable-next-line:max-line-length */\n        }\n        else if ((args.column.type === 'date' || args.column.type === 'datetime' || args.column.type === 'time') && args.column.format !== undefined) {\n            if (typeof args.value === 'string') {\n                args.value = new Date(args.value);\n            }\n            if (typeof args.column.format === 'string') {\n                var format = void 0;\n                var cFormat = args.column.format;\n                if (args.column.type === 'date') {\n                    format = isServerBlaz ? { type: 'date', format: cFormat } : { type: 'date', skeleton: cFormat };\n                }\n                else if (args.column.type === 'time') {\n                    format = isServerBlaz ? { type: 'time', format: cFormat } : { type: 'time', skeleton: cFormat };\n                }\n                else {\n                    format = isServerBlaz ? { type: 'dateTime', format: cFormat } : { type: 'dateTime', skeleton: cFormat };\n                }\n                return this.returnFormattedValue(args, format);\n            }\n            else {\n                if (args.column.format instanceof Object && args.column.format.type === undefined) {\n                    return (args.value.toString());\n                }\n                else {\n                    /* tslint:disable-next-line:max-line-length */\n                    var customFormat = void 0;\n                    if (args.column.type === 'date') {\n                        /* tslint:disable-next-line:max-line-length */\n                        customFormat = { type: args.column.format.type, format: args.column.format.format, skeleton: args.column.format.skeleton };\n                    }\n                    else if (args.column.type === 'time') {\n                        customFormat = { type: 'time', format: args.column.format.format, skeleton: args.column.format.skeleton };\n                    }\n                    else {\n                        customFormat = { type: 'dateTime', format: args.column.format.format, skeleton: args.column.format.skeleton };\n                    }\n                    return this.returnFormattedValue(args, customFormat);\n                }\n            }\n        }\n        else {\n            if ((!isNullOrUndefined(args.column.type) && !isNullOrUndefined(args.value)) || !isNullOrUndefined(args.value)) {\n                return (args.value).toString();\n            }\n            else {\n                return '';\n            }\n        }\n    };\n    return ExportValueFormatter;\n}());\nexport { ExportValueFormatter };\n"]},"metadata":{},"sourceType":"module"}