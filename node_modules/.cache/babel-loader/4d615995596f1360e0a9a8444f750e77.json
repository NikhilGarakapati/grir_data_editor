{"ast":null,"code":"import * as events from '../base/constant';\nimport { Workbook } from '@syncfusion/ej2-excel-export';\nimport { isNullOrUndefined, getEnumValue, compile, getValue, detach, extend, isBlazor } from '@syncfusion/ej2-base';\nimport { Data } from '../actions/data';\nimport { ExportHelper, ExportValueFormatter } from './export-helper';\nimport { SummaryModelGenerator, GroupSummaryModelGenerator, CaptionSummaryModelGenerator } from '../services/summary-model-generator';\nimport { CellType, AggregateTemplateType } from '../base/enum';\nimport { Query, DataManager } from '@syncfusion/ej2-data';\nimport { getPrintGridModel, getUid, isExportColumns, updateColumnTypeForExportColumns, prepareColumns } from '../base/util';\n/**\n * @hidden\n * `ExcelExport` module is used to handle the Excel export action.\n */\n\nvar ExcelExport =\n/** @class */\nfunction () {\n  /**\n   * Constructor for the Grid Excel Export module.\n   * @hidden\n   */\n  function ExcelExport(parent, locator) {\n    /* tslint:disable-next-line:no-any */\n    this.book = {};\n    this.workSheet = [];\n    this.rows = [];\n    this.columns = [];\n    this.styles = [];\n    this.rowLength = 1;\n    this.expType = 'AppendToSheet';\n    this.includeHiddenColumn = false;\n    this.isCsvExport = false;\n    this.isElementIdChanged = false;\n    this.foreignKeyData = {};\n    this.gridPool = {};\n    this.parent = parent;\n    this.helper = new ExportHelper(parent);\n    this.locator = locator;\n    this.l10n = this.locator.getService('localization');\n  }\n  /**\n   * For internal use only - Get the module name.\n   */\n\n\n  ExcelExport.prototype.getModuleName = function () {\n    return 'ExcelExport';\n  };\n\n  ExcelExport.prototype.init = function (gObj) {\n    if (gObj.element !== null && gObj.element.id === '') {\n      gObj.element.id = new Date().toISOString();\n      this.isElementIdChanged = true;\n    }\n\n    this.parent = gObj;\n\n    if (this.parent.isDestroyed) {\n      return;\n    }\n\n    this.isExporting = undefined;\n    this.book = {};\n    this.workSheet = [];\n    this.rows = [];\n    this.columns = [];\n    this.styles = [];\n    this.rowLength = 1;\n    this.footer = undefined;\n    this.expType = 'AppendToSheet';\n    this.includeHiddenColumn = false;\n    this.exportValueFormatter = new ExportValueFormatter(gObj.locale);\n    gObj.id = getUid('main-grid');\n    this.gridPool[gObj.id] = false;\n  };\n  /**\n   * Export Grid to Excel file.\n   * @param  {exportProperties} exportProperties - Defines the export properties of the Grid.\n   * @param  {isMultipleExport} isMultipleExport - Defines is multiple Grid's are exported.\n   * @param  {workbook} workbook - Defined the Workbook if multiple Grid is exported.\n   * @param  {isCsv} isCsv - true if export to CSV.\n   * @return {Promise<any>}\n   */\n\n  /* tslint:disable-next-line:max-line-length */\n\n  /* tslint:disable-next-line:no-any */\n\n\n  ExcelExport.prototype.Map = function (grid, exportProperties, isMultipleExport, workbook, isCsv, isBlob) {\n    var gObj = grid;\n    var cancel = 'cancel';\n    var isBlb = 'isBlob';\n    var csv = 'isCsv';\n    var workbk = 'workbook';\n    var isMultiEx = 'isMultipleExport';\n    this.gridPool = {};\n\n    if (grid.childGrid && !(!isNullOrUndefined(exportProperties) && exportProperties.hierarchyExportMode === 'None')) {\n      grid.expandedRows = getPrintGridModel(grid).expandedRows;\n    }\n\n    var args = {\n      requestType: 'beforeExcelExport',\n      gridObject: gObj,\n      cancel: false,\n      isMultipleExport: isMultipleExport,\n      workbook: workbook,\n      isCsv: isCsv,\n      isBlob: isBlob\n    };\n    gObj.trigger(events.beforeExcelExport, args);\n\n    if (args[cancel]) {\n      return new Promise(function (resolve, reject) {\n        return resolve();\n      });\n    }\n\n    this.parent.log('exporting_begin', this.getModuleName());\n    this.data = new Data(gObj);\n    this.isExporting = true;\n    this.isBlob = args[isBlb];\n\n    if (args[csv]) {\n      this.isCsvExport = args[csv];\n    } else {\n      this.isCsvExport = false;\n    }\n\n    if (isExportColumns(exportProperties)) {\n      updateColumnTypeForExportColumns(exportProperties, gObj);\n    }\n\n    return this.processRecords(gObj, exportProperties, args[isMultiEx], args[workbk]);\n  };\n\n  ExcelExport.prototype.exportingSuccess = function (resolve) {\n    this.isExporting = false;\n    this.parent.trigger(events.excelExportComplete, this.isBlob ? {\n      promise: this.blobPromise\n    } : {});\n    this.parent.log('exporting_complete', this.getModuleName());\n    resolve(this.book);\n  };\n  /* tslint:disable-next-line:no-any */\n\n\n  ExcelExport.prototype.processRecords = function (gObj, exportProperties, isMultipleExport, workbook) {\n    var _this = this;\n\n    if (!isNullOrUndefined(exportProperties) && !isNullOrUndefined(exportProperties.dataSource)) {\n      if (!(exportProperties.dataSource instanceof DataManager)) {\n        exportProperties.dataSource = new DataManager(exportProperties.dataSource);\n      }\n\n      var query_1 = exportProperties.query ? exportProperties.query : new Query();\n\n      if (isNullOrUndefined(query_1.isCountRequired) || gObj.aggregates) {\n        query_1.isCountRequired = true;\n      }\n\n      return new Promise(function (resolve, reject) {\n        var dataManager = exportProperties.dataSource.executeQuery(query_1);\n        dataManager.then(function (r) {\n          _this.init(gObj);\n\n          _this.processInnerRecords(gObj, exportProperties, isMultipleExport, workbook, r).then(function () {\n            _this.exportingSuccess(resolve);\n          });\n        });\n      });\n    } else if (!isNullOrUndefined(exportProperties) && exportProperties.exportType === 'CurrentPage') {\n      return new Promise(function (resolve, reject) {\n        _this.init(gObj);\n\n        _this.processInnerRecords(gObj, exportProperties, isMultipleExport, workbook, _this.parent.getCurrentViewRecords());\n\n        _this.exportingSuccess(resolve);\n      });\n    } else {\n      var allPromise_1 = [];\n      allPromise_1.push(this.data.getData({}, ExportHelper.getQuery(gObj, this.data)));\n      allPromise_1.push(this.helper.getColumnData(gObj));\n      return new Promise(function (resolve, reject) {\n        Promise.all(allPromise_1).then(function (e) {\n          _this.init(gObj);\n\n          _this.processInnerRecords(gObj, exportProperties, isMultipleExport, workbook, e[0]).then(function () {\n            _this.exportingSuccess(resolve);\n          });\n        }).catch(function (e) {\n          reject(_this.book);\n\n          _this.parent.trigger(events.actionFailure, e);\n        });\n      });\n    }\n  };\n  /* tslint:disable-next-line:max-func-body-length */\n\n\n  ExcelExport.prototype.processInnerRecords = function (gObj, exportProperties,\n  /* tslint:disable-next-line:no-any */\n  isMultipleExport, workbook, r) {\n    var _this = this;\n\n    this.groupedColLength = gObj.groupSettings.columns.length;\n    var blankRows = 5;\n    var separator;\n    var rows = [];\n    var isExportPropertiesPresent = !isNullOrUndefined(exportProperties);\n\n    if (isExportPropertiesPresent && !isNullOrUndefined(exportProperties.multipleExport)) {\n      /* tslint:disable-next-line:max-line-length */\n      this.expType = !isNullOrUndefined(exportProperties.multipleExport.type) ? exportProperties.multipleExport.type : 'AppendToSheet';\n\n      if (!isNullOrUndefined(exportProperties.multipleExport.blankRows)) {\n        blankRows = exportProperties.multipleExport.blankRows;\n      }\n    }\n\n    if (isNullOrUndefined(workbook)) {\n      this.workSheet = [];\n      this.rows = [];\n      this.columns = [];\n      this.styles = [];\n    } else if (this.expType === 'NewSheet') {\n      this.workSheet = workbook.worksheets;\n      this.rows = [];\n      this.columns = [];\n      this.styles = workbook.styles;\n    } else {\n      this.workSheet = [];\n      this.rows = workbook.worksheets[0].rows;\n      this.columns = workbook.worksheets[0].columns;\n      this.styles = workbook.styles;\n      this.rowLength = this.rows[this.rows.length - 1].index + blankRows;\n      this.rowLength++;\n    }\n\n    if (isExportPropertiesPresent) {\n      if (!isNullOrUndefined(isMultipleExport)) {\n        if (!isNullOrUndefined(exportProperties.header) && (isMultipleExport || this.expType === 'NewSheet')) {\n          this.processExcelHeader(JSON.parse(JSON.stringify(exportProperties.header)));\n        }\n\n        if (!isNullOrUndefined(exportProperties.footer)) {\n          if (this.expType === 'AppendToSheet') {\n            if (!isMultipleExport) {\n              this.footer = JSON.parse(JSON.stringify(exportProperties.footer));\n            }\n          } else {\n            this.footer = JSON.parse(JSON.stringify(exportProperties.footer));\n          }\n        }\n      } else {\n        if (!isNullOrUndefined(exportProperties.header)) {\n          this.processExcelHeader(JSON.parse(JSON.stringify(exportProperties.header)));\n        }\n\n        if (!isNullOrUndefined(exportProperties.footer)) {\n          this.footer = JSON.parse(JSON.stringify(exportProperties.footer));\n        }\n      }\n    }\n\n    this.includeHiddenColumn = isExportPropertiesPresent ? exportProperties.includeHiddenColumn : false;\n    return new Promise(function (resolve, reject) {\n      gObj.childGridLevel = 0;\n      rows = _this.processGridExport(gObj, exportProperties, r);\n      _this.globalResolve = resolve;\n      _this.gridPool[gObj.id] = true;\n\n      _this.helper.checkAndExport(_this.gridPool, _this.globalResolve);\n    }).then(function () {\n      var organisedRows = [];\n\n      _this.organiseRows(rows, rows[0].index, organisedRows);\n\n      _this.rows = _this.rows.concat(organisedRows); //footer template add\n\n      if (!isNullOrUndefined(_this.footer)) {\n        if (_this.expType === 'AppendToSheet' && !isMultipleExport || _this.expType === 'NewSheet') {\n          _this.processExcelFooter(_this.footer);\n        }\n      }\n\n      var sheet = {};\n\n      if (_this.columns.length > 0) {\n        sheet.columns = _this.columns;\n      }\n      /* tslint:disable-next-line:no-any */\n\n\n      sheet.rows = _this.rows;\n\n      _this.workSheet.push(sheet);\n\n      _this.book.worksheets = _this.workSheet;\n      _this.book.styles = _this.styles;\n      gObj.notify('finalPageSetup', _this.book);\n\n      if (!isMultipleExport) {\n        if (_this.isCsvExport) {\n          if (isBlazor() && gObj.isServerRendered) {\n            _this.book.isServerRendered = gObj.isServerRendered;\n          }\n\n          if (isExportPropertiesPresent && !isNullOrUndefined(exportProperties.separator) && exportProperties.separator !== ',') {\n            separator = exportProperties.separator;\n          }\n          /* tslint:disable-next-line:max-line-length */\n\n\n          var book = new Workbook(_this.book, 'csv', gObj.locale, gObj.currencyCode, separator);\n\n          if (!_this.isBlob) {\n            if (isExportPropertiesPresent && exportProperties.fileName) {\n              book.save(exportProperties.fileName);\n            } else {\n              book.save('Export.csv');\n            }\n          } else {\n            _this.blobPromise = book.saveAsBlob('text/csv');\n          }\n        } else {\n          var book = new Workbook(_this.book, 'xlsx', gObj.locale, gObj.currencyCode);\n\n          if (!_this.isBlob) {\n            if (isExportPropertiesPresent && exportProperties.fileName) {\n              book.save(exportProperties.fileName);\n            } else {\n              book.save('Export.xlsx');\n            }\n          } else {\n            _this.blobPromise = book.saveAsBlob('application/vnd.openxmlformats-officedocument.spreadsheetml.sheet');\n          }\n        }\n\n        if (_this.isElementIdChanged) {\n          gObj.element.id = '';\n        }\n\n        delete gObj.expandedRows;\n      }\n\n      return workbook;\n    });\n  };\n\n  ExcelExport.prototype.organiseRows = function (rows, initialIndex, organisedRows) {\n    if (!rows.length) {\n      return initialIndex;\n    }\n\n    for (var i = 0; i < rows.length; i++) {\n      var row = rows[i];\n      var childRows = row.childRows;\n\n      if (childRows) {\n        row.index = initialIndex++;\n        delete row.childRows;\n        organisedRows.push(row);\n        initialIndex = this.organiseRows(childRows, initialIndex, organisedRows);\n      } else {\n        row.index = initialIndex++;\n        organisedRows.push(row);\n      }\n    }\n\n    return initialIndex;\n  };\n\n  ExcelExport.prototype.processGridExport = function (gObj, exportProperties, r) {\n    var excelRows = [];\n\n    if (!isNullOrUndefined(exportProperties) && !isNullOrUndefined(exportProperties.theme)) {\n      this.theme = exportProperties.theme;\n    }\n\n    if (gObj.childGrid && !isNullOrUndefined(exportProperties)) {\n      gObj.hierarchyPrintMode = exportProperties.hierarchyExportMode || 'Expanded';\n    }\n\n    var helper = new ExportHelper(gObj);\n    var gColumns = isExportColumns(exportProperties) ? prepareColumns(exportProperties.columns, gObj.enableColumnVirtualization) : helper.getGridExportColumns(gObj.columns);\n    var headerRow = helper.getHeaders(gColumns, this.includeHiddenColumn);\n    var groupIndent = gObj.groupSettings.columns.length;\n    excelRows = this.processHeaderContent(gObj, headerRow, groupIndent, excelRows);\n    /* tslint:disable-next-line:max-line-length */\n\n    if (!isNullOrUndefined(exportProperties) && !isNullOrUndefined(exportProperties.dataSource) && !(exportProperties.dataSource instanceof DataManager)) {\n      excelRows = this.processRecordContent(gObj, r, headerRow, exportProperties, exportProperties.dataSource, excelRows, helper);\n    } else if (!isNullOrUndefined(exportProperties) && exportProperties.exportType === 'CurrentPage') {\n      excelRows = this.processRecordContent(gObj, r, headerRow, exportProperties, gObj.currentViewData, excelRows, helper);\n    } else {\n      excelRows = this.processRecordContent(gObj, r, headerRow, exportProperties, undefined, excelRows, helper);\n    }\n\n    gObj.notify(events.exportDataBound, {\n      excelRows: excelRows,\n      type: 'excel'\n    });\n    return excelRows;\n  };\n\n  ExcelExport.prototype.processRecordContent = function (gObj, returnType, headerRow, exportProperties, currentViewRecords, excelRow, helper) {\n    var record;\n\n    if (!isNullOrUndefined(currentViewRecords) && currentViewRecords.length) {\n      record = currentViewRecords;\n    } else {\n      record = returnType.result;\n    }\n\n    if (!isNullOrUndefined(record.level)) {\n      this.processGroupedRows(gObj, record, headerRow, record.level, 0, exportProperties, excelRow, helper);\n    } else {\n      this.processRecordRows(gObj, record, headerRow, 0, 0, exportProperties, excelRow, helper);\n    }\n\n    if (!isNullOrUndefined(returnType.aggregates)) {\n      if (!isNullOrUndefined(currentViewRecords)) {\n        this.processAggregates(gObj, returnType.result, excelRow, currentViewRecords);\n      } else {\n        var result = returnType.result.GroupGuid ? returnType.result.records : returnType.result;\n        this.processAggregates(gObj, result, excelRow, null, null, null, headerRow.columns);\n      }\n    }\n\n    return excelRow;\n  };\n  /* tslint:disable-next-line:no-any */\n\n\n  ExcelExport.prototype.processGroupedRows = function (gObj, dataSource, headerRow, level, startIndex, excelExportProperties, excelRows, helper) {\n    for (var _i = 0, dataSource_1 = dataSource; _i < dataSource_1.length; _i++) {\n      var item = dataSource_1[_i];\n      var cells = [];\n      var index = 1;\n      /* tslint:disable-next-line:no-any */\n\n      var cell = {};\n      cell.index = index + level;\n      var col = gObj.getColumnByField(item.field);\n      /* tslint:disable-next-line:no-any */\n\n      var args = {\n        value: item.key,\n        column: col,\n        style: undefined,\n        isForeignKey: col.isForeignColumn()\n      };\n      var value = gObj.getColumnByField(item.field).headerText + ': ' + (!col.enableGroupByFormat ? this.exportValueFormatter.formatCellValue(args) : item.key) + ' - ';\n\n      if (item.count > 1) {\n        value += item.count + ' items';\n      } else {\n        value += item.count + ' item';\n      }\n\n      var cArgs = {\n        captionText: value,\n        type: this.isCsvExport ? 'CSV' : 'Excel'\n      };\n      this.parent.trigger(events.exportGroupCaption, cArgs);\n      cell.value = cArgs.captionText;\n      cell.style = this.getCaptionThemeStyle(this.theme);\n      var captionModelGen = new CaptionSummaryModelGenerator(gObj);\n      var groupCaptionSummaryRows = captionModelGen.generateRows(item);\n      this.fillAggregates(gObj, groupCaptionSummaryRows, dataSource.level + dataSource.childLevels, excelRows, this.rowLength);\n      cells.push(cell);\n\n      if (excelRows[excelRows.length - 1].cells.length > 0) {\n        var lIndex = dataSource.level + dataSource.childLevels + groupCaptionSummaryRows[0].cells.length;\n        var hIndex = 0;\n\n        for (var _a = 0, _b = excelRows[excelRows.length - 1].cells; _a < _b.length; _a++) {\n          var tCell = _b[_a];\n\n          if (tCell.index < lIndex) {\n            lIndex = tCell.index;\n          }\n\n          if (tCell.index > hIndex) {\n            hIndex = tCell.index;\n          }\n\n          if (cells[cells.length - 1].index !== tCell.index) {\n            cells.push(tCell);\n          }\n        }\n\n        if (lIndex - cell.index > 1) {\n          cell.colSpan = lIndex - cell.index;\n        }\n\n        while (hIndex < headerRow.columns.length + level + dataSource.childLevels) {\n          /* tslint:disable-next-line:no-any */\n          var sCell = {};\n          sCell.index = hIndex + 1;\n          sCell.style = this.getCaptionThemeStyle(this.theme);\n          cells.push(sCell);\n          hIndex++;\n        }\n      } else {\n        var span = 0; //Calculation for column span when group caption dont have aggregates\n\n        for (var _c = 0, _d = headerRow.columns; _c < _d.length; _c++) {\n          var col_1 = _d[_c];\n\n          if (col_1.visible) {\n            span++;\n          }\n        }\n\n        cell.colSpan = dataSource.childLevels + span;\n      }\n\n      excelRows[excelRows.length - 1].cells = cells;\n      this.rowLength++;\n\n      if (this.groupedColLength < 8 && level > 1) {\n        var grouping = {\n          outlineLevel: level - 1,\n          isCollapsed: true\n        };\n        excelRows[excelRows.length - 1].grouping = grouping;\n      }\n\n      if (!isNullOrUndefined(dataSource.childLevels) && dataSource.childLevels > 0) {\n        this.processGroupedRows(gObj, item.items, headerRow, item.items.level, startIndex, excelExportProperties, excelRows, helper);\n      } else {\n        startIndex = this.processRecordRows(gObj, item.items, headerRow, level, startIndex, excelExportProperties, excelRows, helper);\n        this.processAggregates(gObj, item, excelRows, undefined, level, true);\n      }\n    }\n  };\n\n  ExcelExport.prototype.processRecordRows = function (gObj, record, headerRow, level, startIndex, excelExportProperties, excelRows, helper) {\n    var index = 1;\n    var cells = [];\n    var columns = headerRow.columns;\n    var rows = helper.getGridRowModel(columns, record, gObj, startIndex);\n\n    for (var _i = 0, rows_1 = rows; _i < rows_1.length; _i++) {\n      var row = rows_1[_i];\n      cells = [];\n      startIndex++;\n      index = 1;\n\n      for (var c = 0, len = row.cells.length; c < len; c++) {\n        var gCell = row.cells[c];\n\n        if (gCell.cellType !== CellType.Data) {\n          continue;\n        }\n\n        var column = gCell.column;\n        var field = column.field;\n        var cellValue = !isNullOrUndefined(field) ? column.valueAccessor(field, row.data, column) : '';\n        var value = !isNullOrUndefined(cellValue) ? cellValue : '';\n        var fkData = void 0;\n\n        if (column.isForeignColumn && column.isForeignColumn()) {\n          fkData = helper.getFData(value, column);\n          value = getValue(column.foreignKeyValue, fkData);\n        }\n\n        if (!isNullOrUndefined(value)) {\n          var cell = {};\n          /* tslint:disable-next-line:no-any */\n\n          var excelCellArgs = {\n            data: row.data,\n            column: column,\n            foreignKeyData: fkData,\n            value: value,\n            style: undefined,\n            colSpan: 1,\n            cell: cell\n          };\n          gObj.trigger(events.excelQueryCellInfo, excelCellArgs);\n          cell = excelCellArgs.cell;\n          cell.index = index + level + gObj.childGridLevel;\n          cell.value = excelCellArgs.value;\n\n          if (excelCellArgs.data === '' && gObj.childGridLevel && index === 1) {\n            var style = {};\n            style.hAlign = 'left';\n            excelCellArgs = {\n              style: style\n            };\n            cell.colSpan = gObj.getVisibleColumns().length;\n            cell.value = this.l10n.getConstant('EmptyRecord');\n          }\n\n          if (excelCellArgs.colSpan > 1) {\n            cell.colSpan = excelCellArgs.colSpan;\n          }\n\n          if (!isNullOrUndefined(excelCellArgs.style)) {\n            var styleIndex = this.getColumnStyle(gObj, index + level);\n            cell.style = this.mergeOptions(this.styles[styleIndex], excelCellArgs.style);\n          } else {\n            cell.style = {\n              name: gObj.element.id + 'column' + (index + level)\n            };\n          }\n\n          cells.push(cell);\n        }\n\n        index++;\n      }\n\n      var excelRow = {\n        index: this.rowLength++,\n        cells: cells\n      };\n\n      if (this.groupedColLength < 8 && level > 0) {\n        excelRow.grouping = {\n          outlineLevel: level,\n          isCollapsed: true\n        };\n        excelRows.push(excelRow);\n      } else {\n        excelRows.push(excelRow);\n      }\n\n      if (!isNullOrUndefined(gObj.childGrid)) {\n        gObj.isPrinting = true;\n        var exportType = !isNullOrUndefined(excelExportProperties) && excelExportProperties.exportType ? excelExportProperties.exportType : 'AllPages';\n        var returnVal = this.helper.createChildGrid(gObj, row, exportType, this.gridPool);\n        var childGridObj = returnVal.childGrid;\n        var element = returnVal.element;\n        childGridObj.actionFailure = helper.failureHandler(this.gridPool, childGridObj, this.globalResolve);\n        childGridObj.childGridLevel = gObj.childGridLevel + 1;\n        var args = {\n          childGrid: childGridObj,\n          row: row,\n          exportProperties: excelExportProperties\n        };\n        this.parent.trigger(events.exportDetailDataBound, args);\n        childGridObj.beforeDataBound = this.childGridCell(excelRow, childGridObj, excelExportProperties, row);\n        childGridObj.appendTo(element);\n      }\n\n      gObj.notify(events.exportRowDataBound, {\n        rowObj: row,\n        type: 'excel',\n        excelRows: excelRows\n      });\n    }\n\n    return startIndex;\n  };\n\n  ExcelExport.prototype.childGridCell = function (excelRow, childGridObj, excelExportProps, gRow) {\n    var _this = this;\n\n    return function (result) {\n      childGridObj.beforeDataBound = null;\n      result.cancel = true;\n\n      if (result.result.length === 0) {\n        result.result = [''];\n      }\n\n      excelRow.childRows = _this.processGridExport(childGridObj, excelExportProps, result);\n      var intent = _this.parent.groupSettings.columns.length;\n      var rows = excelRow.childRows;\n\n      for (var i = 0; i < rows.length; i++) {\n        rows[i].grouping = {\n          outlineLevel: intent + childGridObj.childGridLevel,\n          isCollapsed: !gRow.isExpand,\n          isHidden: !gRow.isExpand\n        };\n      }\n\n      childGridObj.destroy();\n      detach(childGridObj.element);\n      _this.gridPool[childGridObj.id] = true;\n\n      _this.helper.checkAndExport(_this.gridPool, _this.globalResolve);\n\n      return excelRow;\n    };\n  }; // tslint:disable-next-line:max-line-length\n\n\n  ExcelExport.prototype.processAggregates = function (gObj, rec, excelRows, currentViewRecords, indent, byGroup, columns) {\n    var summaryModel = new SummaryModelGenerator(gObj);\n\n    if (gObj.aggregates.length && this.parent !== gObj) {\n      gObj.aggregateModule.prepareSummaryInfo();\n    }\n\n    var data = undefined;\n\n    if (!isNullOrUndefined(currentViewRecords)) {\n      data = currentViewRecords;\n    } else {\n      data = rec;\n    }\n\n    if (indent === undefined) {\n      indent = 0;\n    }\n\n    if (gObj.groupSettings.columns.length > 0 && byGroup) {\n      var groupSummaryModel = new GroupSummaryModelGenerator(gObj);\n      var groupSummaryRows = groupSummaryModel.generateRows(data, {\n        level: data.level\n      });\n\n      if (groupSummaryRows.length > 0) {\n        excelRows = this.fillAggregates(gObj, groupSummaryRows, indent, excelRows);\n      }\n    } else {\n      indent = gObj.groupSettings.columns.length > 0 && !byGroup ? gObj.groupSettings.columns.length : indent;\n      var sRows = summaryModel.generateRows(data, rec.aggregates, null, null, columns);\n\n      if (sRows.length > 0 && !byGroup) {\n        excelRows = this.fillAggregates(gObj, sRows, indent, excelRows);\n      }\n    }\n\n    return excelRows;\n  }; // tslint:disable-next-line:max-line-length\n\n\n  ExcelExport.prototype.fillAggregates = function (gObj, rows, indent, excelRows, customIndex) {\n    for (var _i = 0, rows_2 = rows; _i < rows_2.length; _i++) {\n      var row = rows_2[_i];\n      var cells = [];\n      var index = 0;\n\n      for (var _a = 0, _b = row.cells; _a < _b.length; _a++) {\n        var cell = _b[_a];\n        /* tslint:disable-next-line:no-any */\n\n        var eCell = {};\n\n        if (cell.cellType === CellType.DetailFooterIntent) {\n          continue;\n        }\n\n        if (cell.visible || this.includeHiddenColumn) {\n          index++;\n\n          if (cell.isDataCell) {\n            var footerTemplate = !isNullOrUndefined(cell.column.footerTemplate);\n            var groupFooterTemplate = !isNullOrUndefined(cell.column.groupFooterTemplate);\n            var groupCaptionTemplate = !isNullOrUndefined(cell.column.groupCaptionTemplate);\n            eCell.index = index + indent + gObj.childGridLevel;\n\n            if (footerTemplate) {\n              eCell.value = this.getAggreateValue(CellType.Summary, cell.column.footerTemplate, cell, row);\n            } else if (groupFooterTemplate) {\n              eCell.value = this.getAggreateValue(CellType.GroupSummary, cell.column.groupFooterTemplate, cell, row);\n            } else if (groupCaptionTemplate) {\n              eCell.value = this.getAggreateValue(CellType.CaptionSummary, cell.column.groupCaptionTemplate, cell, row);\n            } else {\n              for (var _c = 0, _d = Object.keys(row.data[cell.column.field]); _c < _d.length; _c++) {\n                var key = _d[_c];\n\n                if (key === cell.column.type) {\n                  if (!isNullOrUndefined(row.data[cell.column.field].Sum)) {\n                    eCell.value = row.data[cell.column.field][cell.column.field + \" - sum\"];\n                  } else if (!isNullOrUndefined(row.data[cell.column.field].Average)) {\n                    eCell.value = row.data[cell.column.field][cell.column.field + \" - average\"];\n                  } else if (!isNullOrUndefined(row.data[cell.column.field].Max)) {\n                    eCell.value = row.data[cell.column.field][cell.column.field + \" - max\"];\n                  } else if (!isNullOrUndefined(row.data[cell.column.field].Min)) {\n                    eCell.value = row.data[cell.column.field][cell.column.field + \" - min\"];\n                  } else if (!isNullOrUndefined(row.data[cell.column.field].Count)) {\n                    eCell.value = row.data[cell.column.field][cell.column.field + \" - count\"];\n                  } else if (!isNullOrUndefined(row.data[cell.column.field].TrueCount)) {\n                    eCell.value = row.data[cell.column.field][cell.column.field + \" - truecount\"];\n                  } else if (!isNullOrUndefined(row.data[cell.column.field].FalseCount)) {\n                    eCell.value = row.data[cell.column.field][cell.column.field + \" - falsecount\"];\n                  } else if (!isNullOrUndefined(row.data[cell.column.field].Custom)) {\n                    eCell.value = row.data[cell.column.field].Custom;\n                  }\n                }\n              }\n            }\n\n            eCell.style = this.getCaptionThemeStyle(this.theme); //{ name: gObj.element.id + 'column' + index };\n\n            this.aggregateStyle(cell.column, eCell.style, cell.column.field);\n            var gridCellStyle = cell.attributes.style;\n\n            if (gridCellStyle.textAlign) {\n              eCell.style.hAlign = gridCellStyle.textAlign.toLowerCase();\n            }\n\n            var args = {\n              row: row,\n              type: footerTemplate ? AggregateTemplateType.Footer : groupFooterTemplate ? AggregateTemplateType.GroupFooter : AggregateTemplateType.GroupCaption,\n              style: eCell\n            };\n            this.parent.trigger(events.excelAggregateQueryCellInfo, args);\n            cells.push(eCell);\n          } else {\n            if (customIndex === undefined) {\n              eCell.index = index + indent + gObj.childGridLevel;\n              eCell.style = this.getCaptionThemeStyle(this.theme); //{ name: gObj.element.id + 'column' + index };\n\n              cells.push(eCell);\n            }\n          }\n        }\n      }\n\n      if (!isNullOrUndefined(customIndex)) {\n        excelRows.push({\n          index: customIndex,\n          cells: cells\n        });\n      } else {\n        var row_1 = {};\n\n        if (this.groupedColLength < 8 && this.groupedColLength > 0) {\n          var dummyOutlineLevel = 'outlineLevel';\n          var dummyGrouping = 'grouping';\n          var level = excelRows[excelRows.length - 1][dummyGrouping][dummyOutlineLevel];\n          var grouping = {\n            outlineLevel: level,\n            isCollapsed: true\n          };\n          row_1 = {\n            index: this.rowLength++,\n            cells: cells,\n            grouping: grouping\n          };\n        } else {\n          row_1 = {\n            index: this.rowLength++,\n            cells: cells\n          };\n        }\n\n        excelRows.push(row_1);\n      }\n    }\n\n    return excelRows;\n  };\n\n  ExcelExport.prototype.aggregateStyle = function (col, style, field) {\n    var column = this.parent.getColumnByField(field);\n\n    if (typeof col.format === 'object') {\n      var format = col.format;\n      style.numberFormat = !isNullOrUndefined(format.format) ? format.format : format.skeleton;\n\n      if (!isNullOrUndefined(format.type)) {\n        style.type = format.type.toLowerCase();\n      }\n    } else {\n      style.numberFormat = col.format;\n    }\n\n    if (!isNullOrUndefined(column) && isNullOrUndefined(style.type)) {\n      style.type = column.type.toLowerCase();\n    }\n  };\n\n  ExcelExport.prototype.getAggreateValue = function (cellType, template, cell, row) {\n    var templateFn = {};\n    templateFn[getEnumValue(CellType, cell.cellType)] = compile(template);\n    /* tslint:disable-next-line:max-line-length */\n\n    var txt = templateFn[getEnumValue(CellType, cell.cellType)](row.data[cell.column.field ? cell.column.field : cell.column.columnName]);\n    return txt[0].textContent;\n  };\n\n  ExcelExport.prototype.mergeOptions = function (JSON1, JSON2) {\n    var result = {};\n    var attrname = Object.keys(JSON1);\n\n    for (var index = 0; index < attrname.length; index++) {\n      if (attrname[index] !== 'name') {\n        result[attrname[index]] = JSON1[attrname[index]];\n      }\n    }\n\n    attrname = Object.keys(JSON2);\n\n    for (var index = 0; index < attrname.length; index++) {\n      if (attrname[index] !== 'name') {\n        result[attrname[index]] = JSON2[attrname[index]];\n      }\n    }\n\n    return result;\n  };\n\n  ExcelExport.prototype.getColumnStyle = function (gObj, columnIndex) {\n    var index = 0;\n\n    for (var _i = 0, _a = this.styles; _i < _a.length; _i++) {\n      var style = _a[_i];\n\n      if (style.name === gObj.element.id + 'column' + columnIndex) {\n        return index;\n      }\n\n      index++;\n    }\n\n    return undefined;\n  };\n\n  ExcelExport.prototype.processHeaderContent = function (gObj, headerRow, indent, excelRows) {\n    var rowIndex = 1;\n    var gridRows = headerRow.rows; // Column collection with respect to the records in the grid\n\n    var gridColumns = headerRow.columns;\n    var spannedCells = [];\n\n    if (indent > 0) {\n      var index = 0;\n\n      while (index !== indent) {\n        this.columns.push({\n          index: index + 1,\n          width: 30\n        });\n        index++;\n      }\n    }\n\n    for (var row = 0; row < gridRows.length; row++) {\n      var currentCellIndex = 1 + indent;\n      var cells = [];\n\n      for (var column = 0; column < gridRows[row].cells.length; column++) {\n        /* tslint:disable-next-line:no-any */\n        var style = {};\n        var cell = {};\n        var gridCell = gridRows[row].cells[column];\n\n        if (gridCell.cellType === CellType.HeaderIndent || gridCell.cellType === CellType.DetailHeader) {\n          continue;\n        }\n\n        var result = {\n          contains: true,\n          index: 1\n        };\n\n        while (result.contains) {\n          result = this.getIndex(spannedCells, rowIndex, currentCellIndex);\n          currentCellIndex = result.index;\n\n          if (!result.contains) {\n            cell.index = result.index + gObj.childGridLevel;\n            break;\n          }\n        }\n\n        if (!isNullOrUndefined(gridCell.rowSpan) && gridCell.rowSpan !== 1) {\n          cell.rowSpan = gridCell.rowSpan;\n\n          for (var i = rowIndex; i < gridCell.rowSpan + rowIndex; i++) {\n            var spannedCell = {\n              rowIndex: 0,\n              columnIndex: 0\n            };\n            spannedCell.rowIndex = i;\n            spannedCell.columnIndex = currentCellIndex;\n            spannedCells.push(spannedCell);\n          }\n        }\n\n        if (!isNullOrUndefined(gridCell.colSpan) && gridCell.colSpan !== 1) {\n          cell.colSpan = gridCell.colSpan;\n          currentCellIndex = currentCellIndex + cell.colSpan - 1;\n        }\n\n        cell.value = gridCell.column.headerText;\n        style = this.getHeaderThemeStyle(this.theme);\n\n        if (!isNullOrUndefined(gridCell.column.textAlign)) {\n          style.hAlign = gridCell.column.textAlign.toLowerCase();\n        }\n\n        if (!isNullOrUndefined(gridCell.column.headerTextAlign)) {\n          style.hAlign = gridCell.column.headerTextAlign.toLowerCase();\n        }\n\n        var excelHeaderCellArgs = {\n          cell: cell,\n          gridCell: gridCell,\n          style: style\n        };\n        gObj.trigger(events.excelHeaderQueryCellInfo, excelHeaderCellArgs);\n        cell.style = excelHeaderCellArgs.style;\n        cells.push(cell);\n        currentCellIndex++;\n      }\n\n      excelRows.push({\n        index: this.rowLength++,\n        cells: cells\n      });\n    }\n\n    for (var col = 0; col < gridColumns.length; col++) {\n      this.parseStyles(gObj, gridColumns[col], this.getRecordThemeStyle(this.theme), indent + col + 1);\n    }\n\n    return excelRows;\n  };\n\n  ExcelExport.prototype.getHeaderThemeStyle = function (theme) {\n    var style = {};\n    style.fontSize = 12;\n    style.borders = {\n      color: '#E0E0E0'\n    };\n    style.bold = true;\n\n    if (!isNullOrUndefined(theme) && !isNullOrUndefined(theme.header)) {\n      style = this.updateThemeStyle(theme.header, style);\n    }\n\n    return style;\n  };\n\n  ExcelExport.prototype.updateThemeStyle = function (themestyle, style) {\n    return extend(style, themestyle);\n  };\n\n  ExcelExport.prototype.getCaptionThemeStyle = function (theme) {\n    var style = {};\n    style.fontSize = 13;\n    style.backColor = '#F6F6F6';\n\n    if (!isNullOrUndefined(theme) && !isNullOrUndefined(theme.caption)) {\n      style = this.updateThemeStyle(theme.caption, style);\n    }\n\n    return style;\n  };\n\n  ExcelExport.prototype.getRecordThemeStyle = function (theme) {\n    var style = {};\n    style.fontSize = 13;\n    style.borders = {\n      color: '#E0E0E0'\n    };\n\n    if (!isNullOrUndefined(theme) && !isNullOrUndefined(theme.record)) {\n      style = this.updateThemeStyle(theme.record, style);\n    }\n\n    return style;\n  };\n\n  ExcelExport.prototype.processExcelHeader = function (header) {\n    if (!isNullOrUndefined(header.rows) && (this.expType === 'NewSheet' || this.rowLength === 1)) {\n      var noRows = void 0;\n\n      if (header.headerRows === undefined) {\n        this.rowLength = header.rows.length;\n      } else {\n        this.rowLength = header.headerRows;\n      }\n\n      if (this.rowLength < header.rows.length) {\n        noRows = this.rowLength;\n      } else {\n        noRows = header.rows.length;\n      }\n\n      this.rowLength++;\n\n      for (var row = 0; row < noRows; row++) {\n        var json = header.rows[row]; //Row index\n\n        if (!(json.index !== null && !isNullOrUndefined(json.index))) {\n          json.index = row + 1;\n        }\n\n        this.updatedCellIndex(json);\n      }\n    }\n  };\n\n  ExcelExport.prototype.updatedCellIndex = function (json) {\n    var cellsLength = json.cells.length;\n\n    for (var cellId = 0; cellId < cellsLength; cellId++) {\n      var jsonCell = json.cells[cellId]; //cell index\n\n      if (!(jsonCell.index !== null && !isNullOrUndefined(jsonCell.index))) {\n        jsonCell.index = cellId + 1;\n      }\n    }\n\n    this.rows.push(json);\n  };\n\n  ExcelExport.prototype.processExcelFooter = function (footer) {\n    if (!isNullOrUndefined(footer.rows)) {\n      var noRows = void 0;\n\n      if (footer.footerRows === undefined) {\n        this.rowLength += footer.rows.length;\n      } else {\n        if (footer.footerRows > footer.rows.length) {\n          this.rowLength += footer.footerRows - footer.rows.length;\n          noRows = footer.rows.length;\n        } else {\n          noRows = footer.footerRows;\n        }\n      }\n\n      for (var row = 0; row < noRows; row++) {\n        var json = footer.rows[row]; //Row index\n\n        if (json.index === null || json.index === undefined) {\n          json.index = this.rowLength++;\n        } else {\n          json.index += this.rowLength;\n        }\n\n        this.updatedCellIndex(json);\n      }\n    }\n  };\n\n  ExcelExport.prototype.getIndex = function (spannedCells, rowIndex, columnIndex) {\n    for (var _i = 0, spannedCells_1 = spannedCells; _i < spannedCells_1.length; _i++) {\n      var spannedCell = spannedCells_1[_i];\n\n      if (spannedCell.rowIndex === rowIndex && spannedCell.columnIndex === columnIndex) {\n        columnIndex = columnIndex + 1;\n        return {\n          contains: true,\n          index: columnIndex\n        };\n      }\n    }\n\n    return {\n      contains: false,\n      index: columnIndex\n    };\n  };\n\n  ExcelExport.prototype.parseStyles = function (gObj, col, style, index) {\n    if (!isNullOrUndefined(col.format)) {\n      if (typeof col.format === 'object') {\n        var format = col.format;\n        style.numberFormat = !isNullOrUndefined(format.format) ? format.format : format.skeleton;\n\n        if (!isNullOrUndefined(format.type)) {\n          style.type = format.type.toLowerCase();\n        }\n      } else {\n        style.numberFormat = col.format;\n        style.type = col.type;\n      }\n    }\n\n    if (!isNullOrUndefined(col.textAlign)) {\n      style.hAlign = col.textAlign.toLowerCase();\n    }\n\n    if (Object.keys(style).length > 0) {\n      style.name = gObj.element.id + 'column' + index;\n      this.styles.push(style);\n    }\n\n    if (!isNullOrUndefined(col.width)) {\n      this.columns.push({\n        index: index + gObj.childGridLevel,\n        width: typeof col.width === 'number' ? col.width : this.helper.getConvertedWidth(col.width)\n      });\n    }\n  };\n  /**\n   * To destroy the excel export\n   * @return {void}\n   * @hidden\n   */\n\n\n  ExcelExport.prototype.destroy = function () {//destroy for exporting\n  };\n\n  return ExcelExport;\n}();\n\nexport { ExcelExport };","map":{"version":3,"sources":["/home/nikhil/Desktop/data_grid_editor-master/node_modules/@syncfusion/ej2-grids/src/grid/actions/excel-export.js"],"names":["events","Workbook","isNullOrUndefined","getEnumValue","compile","getValue","detach","extend","isBlazor","Data","ExportHelper","ExportValueFormatter","SummaryModelGenerator","GroupSummaryModelGenerator","CaptionSummaryModelGenerator","CellType","AggregateTemplateType","Query","DataManager","getPrintGridModel","getUid","isExportColumns","updateColumnTypeForExportColumns","prepareColumns","ExcelExport","parent","locator","book","workSheet","rows","columns","styles","rowLength","expType","includeHiddenColumn","isCsvExport","isElementIdChanged","foreignKeyData","gridPool","helper","l10n","getService","prototype","getModuleName","init","gObj","element","id","Date","toISOString","isDestroyed","isExporting","undefined","footer","exportValueFormatter","locale","Map","grid","exportProperties","isMultipleExport","workbook","isCsv","isBlob","cancel","isBlb","csv","workbk","isMultiEx","childGrid","hierarchyExportMode","expandedRows","args","requestType","gridObject","trigger","beforeExcelExport","Promise","resolve","reject","log","data","processRecords","exportingSuccess","excelExportComplete","promise","blobPromise","_this","dataSource","query_1","query","isCountRequired","aggregates","dataManager","executeQuery","then","r","processInnerRecords","exportType","getCurrentViewRecords","allPromise_1","push","getData","getQuery","getColumnData","all","e","catch","actionFailure","groupedColLength","groupSettings","length","blankRows","separator","isExportPropertiesPresent","multipleExport","type","worksheets","index","header","processExcelHeader","JSON","parse","stringify","childGridLevel","processGridExport","globalResolve","checkAndExport","organisedRows","organiseRows","concat","processExcelFooter","sheet","notify","isServerRendered","currencyCode","fileName","save","saveAsBlob","initialIndex","i","row","childRows","excelRows","theme","hierarchyPrintMode","gColumns","enableColumnVirtualization","getGridExportColumns","headerRow","getHeaders","groupIndent","processHeaderContent","processRecordContent","currentViewData","exportDataBound","returnType","currentViewRecords","excelRow","record","result","level","processGroupedRows","processRecordRows","processAggregates","GroupGuid","records","startIndex","excelExportProperties","_i","dataSource_1","item","cells","cell","col","getColumnByField","field","value","key","column","style","isForeignKey","isForeignColumn","headerText","enableGroupByFormat","formatCellValue","count","cArgs","captionText","exportGroupCaption","getCaptionThemeStyle","captionModelGen","groupCaptionSummaryRows","generateRows","fillAggregates","childLevels","lIndex","hIndex","_a","_b","tCell","colSpan","sCell","span","_c","_d","col_1","visible","grouping","outlineLevel","isCollapsed","items","getGridRowModel","rows_1","c","len","gCell","cellType","cellValue","valueAccessor","fkData","getFData","foreignKeyValue","excelCellArgs","excelQueryCellInfo","hAlign","getVisibleColumns","getConstant","styleIndex","getColumnStyle","mergeOptions","name","isPrinting","returnVal","createChildGrid","childGridObj","failureHandler","exportDetailDataBound","beforeDataBound","childGridCell","appendTo","exportRowDataBound","rowObj","excelExportProps","gRow","intent","isExpand","isHidden","destroy","rec","indent","byGroup","summaryModel","aggregateModule","prepareSummaryInfo","groupSummaryModel","groupSummaryRows","sRows","customIndex","rows_2","eCell","DetailFooterIntent","isDataCell","footerTemplate","groupFooterTemplate","groupCaptionTemplate","getAggreateValue","Summary","GroupSummary","CaptionSummary","Object","keys","Sum","Average","Max","Min","Count","TrueCount","FalseCount","Custom","aggregateStyle","gridCellStyle","attributes","textAlign","toLowerCase","Footer","GroupFooter","GroupCaption","excelAggregateQueryCellInfo","row_1","dummyOutlineLevel","dummyGrouping","format","numberFormat","skeleton","template","templateFn","txt","columnName","textContent","JSON1","JSON2","attrname","columnIndex","rowIndex","gridRows","gridColumns","spannedCells","width","currentCellIndex","gridCell","HeaderIndent","DetailHeader","contains","getIndex","rowSpan","spannedCell","getHeaderThemeStyle","headerTextAlign","excelHeaderCellArgs","excelHeaderQueryCellInfo","parseStyles","getRecordThemeStyle","fontSize","borders","color","bold","updateThemeStyle","themestyle","backColor","caption","noRows","headerRows","json","updatedCellIndex","cellsLength","cellId","jsonCell","footerRows","spannedCells_1","getConvertedWidth"],"mappings":"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","sourcesContent":["import * as events from '../base/constant';\nimport { Workbook } from '@syncfusion/ej2-excel-export';\nimport { isNullOrUndefined, getEnumValue, compile, getValue, detach, extend, isBlazor } from '@syncfusion/ej2-base';\nimport { Data } from '../actions/data';\nimport { ExportHelper, ExportValueFormatter } from './export-helper';\nimport { SummaryModelGenerator, GroupSummaryModelGenerator, CaptionSummaryModelGenerator } from '../services/summary-model-generator';\nimport { CellType, AggregateTemplateType } from '../base/enum';\nimport { Query, DataManager } from '@syncfusion/ej2-data';\nimport { getPrintGridModel, getUid, isExportColumns, updateColumnTypeForExportColumns, prepareColumns } from '../base/util';\n/**\n * @hidden\n * `ExcelExport` module is used to handle the Excel export action.\n */\nvar ExcelExport = /** @class */ (function () {\n    /**\n     * Constructor for the Grid Excel Export module.\n     * @hidden\n     */\n    function ExcelExport(parent, locator) {\n        /* tslint:disable-next-line:no-any */\n        this.book = {};\n        this.workSheet = [];\n        this.rows = [];\n        this.columns = [];\n        this.styles = [];\n        this.rowLength = 1;\n        this.expType = 'AppendToSheet';\n        this.includeHiddenColumn = false;\n        this.isCsvExport = false;\n        this.isElementIdChanged = false;\n        this.foreignKeyData = {};\n        this.gridPool = {};\n        this.parent = parent;\n        this.helper = new ExportHelper(parent);\n        this.locator = locator;\n        this.l10n = this.locator.getService('localization');\n    }\n    /**\n     * For internal use only - Get the module name.\n     */\n    ExcelExport.prototype.getModuleName = function () {\n        return 'ExcelExport';\n    };\n    ExcelExport.prototype.init = function (gObj) {\n        if (gObj.element !== null && gObj.element.id === '') {\n            gObj.element.id = new Date().toISOString();\n            this.isElementIdChanged = true;\n        }\n        this.parent = gObj;\n        if (this.parent.isDestroyed) {\n            return;\n        }\n        this.isExporting = undefined;\n        this.book = {};\n        this.workSheet = [];\n        this.rows = [];\n        this.columns = [];\n        this.styles = [];\n        this.rowLength = 1;\n        this.footer = undefined;\n        this.expType = 'AppendToSheet';\n        this.includeHiddenColumn = false;\n        this.exportValueFormatter = new ExportValueFormatter(gObj.locale);\n        gObj.id = getUid('main-grid');\n        this.gridPool[gObj.id] = false;\n    };\n    /**\n     * Export Grid to Excel file.\n     * @param  {exportProperties} exportProperties - Defines the export properties of the Grid.\n     * @param  {isMultipleExport} isMultipleExport - Defines is multiple Grid's are exported.\n     * @param  {workbook} workbook - Defined the Workbook if multiple Grid is exported.\n     * @param  {isCsv} isCsv - true if export to CSV.\n     * @return {Promise<any>}\n     */\n    /* tslint:disable-next-line:max-line-length */\n    /* tslint:disable-next-line:no-any */\n    ExcelExport.prototype.Map = function (grid, exportProperties, isMultipleExport, workbook, isCsv, isBlob) {\n        var gObj = grid;\n        var cancel = 'cancel';\n        var isBlb = 'isBlob';\n        var csv = 'isCsv';\n        var workbk = 'workbook';\n        var isMultiEx = 'isMultipleExport';\n        this.gridPool = {};\n        if (grid.childGrid && !(!isNullOrUndefined(exportProperties) && exportProperties.hierarchyExportMode === 'None')) {\n            grid.expandedRows = getPrintGridModel(grid).expandedRows;\n        }\n        var args = {\n            requestType: 'beforeExcelExport', gridObject: gObj, cancel: false,\n            isMultipleExport: isMultipleExport, workbook: workbook, isCsv: isCsv, isBlob: isBlob\n        };\n        gObj.trigger(events.beforeExcelExport, args);\n        if (args[cancel]) {\n            return new Promise(function (resolve, reject) {\n                return resolve();\n            });\n        }\n        this.parent.log('exporting_begin', this.getModuleName());\n        this.data = new Data(gObj);\n        this.isExporting = true;\n        this.isBlob = args[isBlb];\n        if (args[csv]) {\n            this.isCsvExport = args[csv];\n        }\n        else {\n            this.isCsvExport = false;\n        }\n        if (isExportColumns(exportProperties)) {\n            updateColumnTypeForExportColumns(exportProperties, gObj);\n        }\n        return this.processRecords(gObj, exportProperties, args[isMultiEx], args[workbk]);\n    };\n    ExcelExport.prototype.exportingSuccess = function (resolve) {\n        this.isExporting = false;\n        this.parent.trigger(events.excelExportComplete, this.isBlob ? { promise: this.blobPromise } : {});\n        this.parent.log('exporting_complete', this.getModuleName());\n        resolve(this.book);\n    };\n    /* tslint:disable-next-line:no-any */\n    ExcelExport.prototype.processRecords = function (gObj, exportProperties, isMultipleExport, workbook) {\n        var _this = this;\n        if (!isNullOrUndefined(exportProperties) && !isNullOrUndefined(exportProperties.dataSource)) {\n            if (!(exportProperties.dataSource instanceof DataManager)) {\n                exportProperties.dataSource = new DataManager(exportProperties.dataSource);\n            }\n            var query_1 = exportProperties.query ? exportProperties.query : new Query();\n            if (isNullOrUndefined(query_1.isCountRequired) || gObj.aggregates) {\n                query_1.isCountRequired = true;\n            }\n            return new Promise(function (resolve, reject) {\n                var dataManager = exportProperties.dataSource.executeQuery(query_1);\n                dataManager.then(function (r) {\n                    _this.init(gObj);\n                    _this.processInnerRecords(gObj, exportProperties, isMultipleExport, workbook, r).then(function () {\n                        _this.exportingSuccess(resolve);\n                    });\n                });\n            });\n        }\n        else if (!isNullOrUndefined(exportProperties) && exportProperties.exportType === 'CurrentPage') {\n            return new Promise(function (resolve, reject) {\n                _this.init(gObj);\n                _this.processInnerRecords(gObj, exportProperties, isMultipleExport, workbook, _this.parent.getCurrentViewRecords());\n                _this.exportingSuccess(resolve);\n            });\n        }\n        else {\n            var allPromise_1 = [];\n            allPromise_1.push(this.data.getData({}, ExportHelper.getQuery(gObj, this.data)));\n            allPromise_1.push(this.helper.getColumnData(gObj));\n            return new Promise(function (resolve, reject) {\n                Promise.all(allPromise_1).then(function (e) {\n                    _this.init(gObj);\n                    _this.processInnerRecords(gObj, exportProperties, isMultipleExport, workbook, e[0]).then(function () {\n                        _this.exportingSuccess(resolve);\n                    });\n                }).catch(function (e) {\n                    reject(_this.book);\n                    _this.parent.trigger(events.actionFailure, e);\n                });\n            });\n        }\n    };\n    /* tslint:disable-next-line:max-func-body-length */\n    ExcelExport.prototype.processInnerRecords = function (gObj, exportProperties, \n    /* tslint:disable-next-line:no-any */\n    isMultipleExport, workbook, r) {\n        var _this = this;\n        this.groupedColLength = gObj.groupSettings.columns.length;\n        var blankRows = 5;\n        var separator;\n        var rows = [];\n        var isExportPropertiesPresent = !isNullOrUndefined(exportProperties);\n        if (isExportPropertiesPresent && !isNullOrUndefined(exportProperties.multipleExport)) {\n            /* tslint:disable-next-line:max-line-length */\n            this.expType = (!isNullOrUndefined(exportProperties.multipleExport.type) ? exportProperties.multipleExport.type : 'AppendToSheet');\n            if (!isNullOrUndefined(exportProperties.multipleExport.blankRows)) {\n                blankRows = exportProperties.multipleExport.blankRows;\n            }\n        }\n        if (isNullOrUndefined(workbook)) {\n            this.workSheet = [];\n            this.rows = [];\n            this.columns = [];\n            this.styles = [];\n        }\n        else if (this.expType === 'NewSheet') {\n            this.workSheet = workbook.worksheets;\n            this.rows = [];\n            this.columns = [];\n            this.styles = workbook.styles;\n        }\n        else {\n            this.workSheet = [];\n            this.rows = workbook.worksheets[0].rows;\n            this.columns = workbook.worksheets[0].columns;\n            this.styles = workbook.styles;\n            this.rowLength = (this.rows[this.rows.length - 1].index + blankRows);\n            this.rowLength++;\n        }\n        if (isExportPropertiesPresent) {\n            if (!isNullOrUndefined(isMultipleExport)) {\n                if (!isNullOrUndefined(exportProperties.header) && (isMultipleExport || this.expType === 'NewSheet')) {\n                    this.processExcelHeader(JSON.parse(JSON.stringify(exportProperties.header)));\n                }\n                if (!isNullOrUndefined(exportProperties.footer)) {\n                    if (this.expType === 'AppendToSheet') {\n                        if (!isMultipleExport) {\n                            this.footer = JSON.parse(JSON.stringify(exportProperties.footer));\n                        }\n                    }\n                    else {\n                        this.footer = JSON.parse(JSON.stringify(exportProperties.footer));\n                    }\n                }\n            }\n            else {\n                if (!isNullOrUndefined(exportProperties.header)) {\n                    this.processExcelHeader(JSON.parse(JSON.stringify(exportProperties.header)));\n                }\n                if (!isNullOrUndefined(exportProperties.footer)) {\n                    this.footer = JSON.parse(JSON.stringify(exportProperties.footer));\n                }\n            }\n        }\n        this.includeHiddenColumn = (isExportPropertiesPresent ? exportProperties.includeHiddenColumn : false);\n        return new Promise(function (resolve, reject) {\n            gObj.childGridLevel = 0;\n            rows = _this.processGridExport(gObj, exportProperties, r);\n            _this.globalResolve = resolve;\n            _this.gridPool[gObj.id] = true;\n            _this.helper.checkAndExport(_this.gridPool, _this.globalResolve);\n        }).then(function () {\n            var organisedRows = [];\n            _this.organiseRows(rows, rows[0].index, organisedRows);\n            _this.rows = _this.rows.concat(organisedRows);\n            //footer template add\n            if (!isNullOrUndefined(_this.footer)) {\n                if ((_this.expType === 'AppendToSheet' && !isMultipleExport) || (_this.expType === 'NewSheet')) {\n                    _this.processExcelFooter(_this.footer);\n                }\n            }\n            var sheet = {};\n            if (_this.columns.length > 0) {\n                sheet.columns = _this.columns;\n            }\n            /* tslint:disable-next-line:no-any */\n            sheet.rows = _this.rows;\n            _this.workSheet.push(sheet);\n            _this.book.worksheets = _this.workSheet;\n            _this.book.styles = _this.styles;\n            gObj.notify('finalPageSetup', _this.book);\n            if (!isMultipleExport) {\n                if (_this.isCsvExport) {\n                    if (isBlazor() && gObj.isServerRendered) {\n                        _this.book.isServerRendered = gObj.isServerRendered;\n                    }\n                    if (isExportPropertiesPresent && !isNullOrUndefined(exportProperties.separator)\n                        && exportProperties.separator !== ',') {\n                        separator = exportProperties.separator;\n                    }\n                    /* tslint:disable-next-line:max-line-length */\n                    var book = new Workbook(_this.book, 'csv', gObj.locale, gObj.currencyCode, separator);\n                    if (!_this.isBlob) {\n                        if (isExportPropertiesPresent && exportProperties.fileName) {\n                            book.save(exportProperties.fileName);\n                        }\n                        else {\n                            book.save('Export.csv');\n                        }\n                    }\n                    else {\n                        _this.blobPromise = book.saveAsBlob('text/csv');\n                    }\n                }\n                else {\n                    var book = new Workbook(_this.book, 'xlsx', gObj.locale, gObj.currencyCode);\n                    if (!_this.isBlob) {\n                        if (isExportPropertiesPresent && exportProperties.fileName) {\n                            book.save(exportProperties.fileName);\n                        }\n                        else {\n                            book.save('Export.xlsx');\n                        }\n                    }\n                    else {\n                        _this.blobPromise = book.saveAsBlob('application/vnd.openxmlformats-officedocument.spreadsheetml.sheet');\n                    }\n                }\n                if (_this.isElementIdChanged) {\n                    gObj.element.id = '';\n                }\n                delete gObj.expandedRows;\n            }\n            return workbook;\n        });\n    };\n    ExcelExport.prototype.organiseRows = function (rows, initialIndex, organisedRows) {\n        if (!rows.length) {\n            return initialIndex;\n        }\n        for (var i = 0; i < rows.length; i++) {\n            var row = rows[i];\n            var childRows = row.childRows;\n            if (childRows) {\n                row.index = initialIndex++;\n                delete row.childRows;\n                organisedRows.push(row);\n                initialIndex = this.organiseRows(childRows, initialIndex, organisedRows);\n            }\n            else {\n                row.index = initialIndex++;\n                organisedRows.push(row);\n            }\n        }\n        return initialIndex;\n    };\n    ExcelExport.prototype.processGridExport = function (gObj, exportProperties, r) {\n        var excelRows = [];\n        if (!isNullOrUndefined(exportProperties) && !isNullOrUndefined(exportProperties.theme)) {\n            this.theme = exportProperties.theme;\n        }\n        if (gObj.childGrid && !isNullOrUndefined(exportProperties)) {\n            gObj.hierarchyPrintMode = exportProperties.hierarchyExportMode || 'Expanded';\n        }\n        var helper = new ExportHelper(gObj);\n        var gColumns = isExportColumns(exportProperties) ?\n            prepareColumns(exportProperties.columns, gObj.enableColumnVirtualization) :\n            helper.getGridExportColumns(gObj.columns);\n        var headerRow = helper.getHeaders(gColumns, this.includeHiddenColumn);\n        var groupIndent = gObj.groupSettings.columns.length;\n        excelRows = this.processHeaderContent(gObj, headerRow, groupIndent, excelRows);\n        /* tslint:disable-next-line:max-line-length */\n        if (!isNullOrUndefined(exportProperties) && !isNullOrUndefined(exportProperties.dataSource) && !(exportProperties.dataSource instanceof DataManager)) {\n            excelRows = this.processRecordContent(gObj, r, headerRow, exportProperties, exportProperties.dataSource, excelRows, helper);\n        }\n        else if (!isNullOrUndefined(exportProperties) && exportProperties.exportType === 'CurrentPage') {\n            excelRows = this.processRecordContent(gObj, r, headerRow, exportProperties, gObj.currentViewData, excelRows, helper);\n        }\n        else {\n            excelRows = this.processRecordContent(gObj, r, headerRow, exportProperties, undefined, excelRows, helper);\n        }\n        gObj.notify(events.exportDataBound, { excelRows: excelRows, type: 'excel' });\n        return excelRows;\n    };\n    ExcelExport.prototype.processRecordContent = function (gObj, returnType, headerRow, exportProperties, currentViewRecords, excelRow, helper) {\n        var record;\n        if (!isNullOrUndefined(currentViewRecords) && currentViewRecords.length) {\n            record = currentViewRecords;\n        }\n        else {\n            record = returnType.result;\n        }\n        if (!isNullOrUndefined(record.level)) {\n            this.processGroupedRows(gObj, record, headerRow, record.level, 0, exportProperties, excelRow, helper);\n        }\n        else {\n            this.processRecordRows(gObj, record, headerRow, 0, 0, exportProperties, excelRow, helper);\n        }\n        if (!isNullOrUndefined(returnType.aggregates)) {\n            if (!isNullOrUndefined(currentViewRecords)) {\n                this.processAggregates(gObj, returnType.result, excelRow, currentViewRecords);\n            }\n            else {\n                var result = returnType.result.GroupGuid ?\n                    returnType.result.records : returnType.result;\n                this.processAggregates(gObj, result, excelRow, null, null, null, headerRow.columns);\n            }\n        }\n        return excelRow;\n    };\n    /* tslint:disable-next-line:no-any */\n    ExcelExport.prototype.processGroupedRows = function (gObj, dataSource, headerRow, level, startIndex, excelExportProperties, excelRows, helper) {\n        for (var _i = 0, dataSource_1 = dataSource; _i < dataSource_1.length; _i++) {\n            var item = dataSource_1[_i];\n            var cells = [];\n            var index = 1;\n            /* tslint:disable-next-line:no-any */\n            var cell = {};\n            cell.index = index + level;\n            var col = gObj.getColumnByField(item.field);\n            /* tslint:disable-next-line:no-any */\n            var args = {\n                value: item.key,\n                column: col,\n                style: undefined,\n                isForeignKey: col.isForeignColumn(),\n            };\n            var value = gObj.getColumnByField(item.field).headerText +\n                ': ' + (!col.enableGroupByFormat ? this.exportValueFormatter.formatCellValue(args) : item.key) + ' - ';\n            if (item.count > 1) {\n                value += item.count + ' items';\n            }\n            else {\n                value += item.count + ' item';\n            }\n            var cArgs = { captionText: value, type: this.isCsvExport ? 'CSV' : 'Excel' };\n            this.parent.trigger(events.exportGroupCaption, cArgs);\n            cell.value = cArgs.captionText;\n            cell.style = this.getCaptionThemeStyle(this.theme);\n            var captionModelGen = new CaptionSummaryModelGenerator(gObj);\n            var groupCaptionSummaryRows = captionModelGen.generateRows(item);\n            this.fillAggregates(gObj, groupCaptionSummaryRows, dataSource.level + dataSource.childLevels, excelRows, this.rowLength);\n            cells.push(cell);\n            if (excelRows[excelRows.length - 1].cells.length > 0) {\n                var lIndex = dataSource.level + dataSource.childLevels + groupCaptionSummaryRows[0].cells.length;\n                var hIndex = 0;\n                for (var _a = 0, _b = excelRows[excelRows.length - 1].cells; _a < _b.length; _a++) {\n                    var tCell = _b[_a];\n                    if (tCell.index < lIndex) {\n                        lIndex = tCell.index;\n                    }\n                    if (tCell.index > hIndex) {\n                        hIndex = tCell.index;\n                    }\n                    if (cells[cells.length - 1].index !== tCell.index) {\n                        cells.push(tCell);\n                    }\n                }\n                if ((lIndex - cell.index) > 1) {\n                    cell.colSpan = lIndex - cell.index;\n                }\n                while (hIndex < (headerRow.columns.length + level + dataSource.childLevels)) {\n                    /* tslint:disable-next-line:no-any */\n                    var sCell = {};\n                    sCell.index = (hIndex + 1);\n                    sCell.style = this.getCaptionThemeStyle(this.theme);\n                    cells.push(sCell);\n                    hIndex++;\n                }\n            }\n            else {\n                var span = 0;\n                //Calculation for column span when group caption dont have aggregates\n                for (var _c = 0, _d = headerRow.columns; _c < _d.length; _c++) {\n                    var col_1 = _d[_c];\n                    if (col_1.visible) {\n                        span++;\n                    }\n                }\n                cell.colSpan = (dataSource.childLevels + span);\n            }\n            excelRows[excelRows.length - 1].cells = cells;\n            this.rowLength++;\n            if (this.groupedColLength < 8 && level > 1) {\n                var grouping = { outlineLevel: level - 1, isCollapsed: true };\n                excelRows[excelRows.length - 1].grouping = grouping;\n            }\n            if (!isNullOrUndefined(dataSource.childLevels) && dataSource.childLevels > 0) {\n                this.processGroupedRows(gObj, item.items, headerRow, item.items.level, startIndex, excelExportProperties, excelRows, helper);\n            }\n            else {\n                startIndex = this.processRecordRows(gObj, item.items, headerRow, (level), startIndex, excelExportProperties, excelRows, helper);\n                this.processAggregates(gObj, item, excelRows, undefined, (level), true);\n            }\n        }\n    };\n    ExcelExport.prototype.processRecordRows = function (gObj, record, headerRow, level, startIndex, excelExportProperties, excelRows, helper) {\n        var index = 1;\n        var cells = [];\n        var columns = headerRow.columns;\n        var rows = helper.getGridRowModel(columns, record, gObj, startIndex);\n        for (var _i = 0, rows_1 = rows; _i < rows_1.length; _i++) {\n            var row = rows_1[_i];\n            cells = [];\n            startIndex++;\n            index = 1;\n            for (var c = 0, len = row.cells.length; c < len; c++) {\n                var gCell = row.cells[c];\n                if (gCell.cellType !== CellType.Data) {\n                    continue;\n                }\n                var column = gCell.column;\n                var field = column.field;\n                var cellValue = !isNullOrUndefined(field) ? column.valueAccessor(field, row.data, column) : '';\n                var value = !isNullOrUndefined(cellValue) ? cellValue : '';\n                var fkData = void 0;\n                if (column.isForeignColumn && column.isForeignColumn()) {\n                    fkData = helper.getFData(value, column);\n                    value = getValue(column.foreignKeyValue, fkData);\n                }\n                if (!isNullOrUndefined(value)) {\n                    var cell = {};\n                    /* tslint:disable-next-line:no-any */\n                    var excelCellArgs = {\n                        data: row.data, column: column, foreignKeyData: fkData,\n                        value: value, style: undefined, colSpan: 1, cell: cell\n                    };\n                    gObj.trigger(events.excelQueryCellInfo, excelCellArgs);\n                    cell = excelCellArgs.cell;\n                    cell.index = index + level + gObj.childGridLevel;\n                    cell.value = excelCellArgs.value;\n                    if (excelCellArgs.data === '' && gObj.childGridLevel && index === 1) {\n                        var style = {};\n                        style.hAlign = 'left';\n                        excelCellArgs = { style: style };\n                        cell.colSpan = gObj.getVisibleColumns().length;\n                        cell.value = this.l10n.getConstant('EmptyRecord');\n                    }\n                    if (excelCellArgs.colSpan > 1) {\n                        cell.colSpan = excelCellArgs.colSpan;\n                    }\n                    if (!isNullOrUndefined(excelCellArgs.style)) {\n                        var styleIndex = this.getColumnStyle(gObj, index + level);\n                        cell.style = this.mergeOptions(this.styles[styleIndex], excelCellArgs.style);\n                    }\n                    else {\n                        cell.style = { name: gObj.element.id + 'column' + (index + level) };\n                    }\n                    cells.push(cell);\n                }\n                index++;\n            }\n            var excelRow = { index: this.rowLength++, cells: cells };\n            if (this.groupedColLength < 8 && level > 0) {\n                excelRow.grouping = { outlineLevel: level, isCollapsed: true };\n                excelRows.push(excelRow);\n            }\n            else {\n                excelRows.push(excelRow);\n            }\n            if (!isNullOrUndefined(gObj.childGrid)) {\n                gObj.isPrinting = true;\n                var exportType = (!isNullOrUndefined(excelExportProperties) && excelExportProperties.exportType) ?\n                    excelExportProperties.exportType : 'AllPages';\n                var returnVal = this.helper.createChildGrid(gObj, row, exportType, this.gridPool);\n                var childGridObj = returnVal.childGrid;\n                var element = returnVal.element;\n                childGridObj.actionFailure =\n                    helper.failureHandler(this.gridPool, childGridObj, this.globalResolve);\n                childGridObj.childGridLevel = gObj.childGridLevel + 1;\n                var args = { childGrid: childGridObj, row: row, exportProperties: excelExportProperties };\n                this.parent.trigger(events.exportDetailDataBound, args);\n                childGridObj.beforeDataBound = this.childGridCell(excelRow, childGridObj, excelExportProperties, row);\n                childGridObj.appendTo(element);\n            }\n            gObj.notify(events.exportRowDataBound, { rowObj: row, type: 'excel', excelRows: excelRows });\n        }\n        return startIndex;\n    };\n    ExcelExport.prototype.childGridCell = function (excelRow, childGridObj, excelExportProps, gRow) {\n        var _this = this;\n        return function (result) {\n            childGridObj.beforeDataBound = null;\n            result.cancel = true;\n            if (result.result.length === 0) {\n                result.result = [''];\n            }\n            excelRow.childRows = _this.processGridExport(childGridObj, excelExportProps, result);\n            var intent = _this.parent.groupSettings.columns.length;\n            var rows = excelRow.childRows;\n            for (var i = 0; i < rows.length; i++) {\n                rows[i].grouping = { outlineLevel: intent + childGridObj.childGridLevel,\n                    isCollapsed: !gRow.isExpand, isHidden: !gRow.isExpand };\n            }\n            childGridObj.destroy();\n            detach(childGridObj.element);\n            _this.gridPool[childGridObj.id] = true;\n            _this.helper.checkAndExport(_this.gridPool, _this.globalResolve);\n            return excelRow;\n        };\n    };\n    // tslint:disable-next-line:max-line-length\n    ExcelExport.prototype.processAggregates = function (gObj, rec, excelRows, currentViewRecords, indent, byGroup, columns) {\n        var summaryModel = new SummaryModelGenerator(gObj);\n        if (gObj.aggregates.length && this.parent !== gObj) {\n            gObj.aggregateModule.prepareSummaryInfo();\n        }\n        var data = undefined;\n        if (!isNullOrUndefined(currentViewRecords)) {\n            data = currentViewRecords;\n        }\n        else {\n            data = rec;\n        }\n        if (indent === undefined) {\n            indent = 0;\n        }\n        if (gObj.groupSettings.columns.length > 0 && byGroup) {\n            var groupSummaryModel = new GroupSummaryModelGenerator(gObj);\n            var groupSummaryRows = groupSummaryModel.generateRows(data, { level: data.level });\n            if (groupSummaryRows.length > 0) {\n                excelRows = this.fillAggregates(gObj, groupSummaryRows, indent, excelRows);\n            }\n        }\n        else {\n            indent = gObj.groupSettings.columns.length > 0 && !byGroup ? gObj.groupSettings.columns.length : indent;\n            var sRows = summaryModel.generateRows(data, rec.aggregates, null, null, columns);\n            if (sRows.length > 0 && !byGroup) {\n                excelRows = this.fillAggregates(gObj, sRows, indent, excelRows);\n            }\n        }\n        return excelRows;\n    };\n    // tslint:disable-next-line:max-line-length\n    ExcelExport.prototype.fillAggregates = function (gObj, rows, indent, excelRows, customIndex) {\n        for (var _i = 0, rows_2 = rows; _i < rows_2.length; _i++) {\n            var row = rows_2[_i];\n            var cells = [];\n            var index = 0;\n            for (var _a = 0, _b = row.cells; _a < _b.length; _a++) {\n                var cell = _b[_a];\n                /* tslint:disable-next-line:no-any */\n                var eCell = {};\n                if (cell.cellType === CellType.DetailFooterIntent) {\n                    continue;\n                }\n                if ((cell.visible || this.includeHiddenColumn)) {\n                    index++;\n                    if (cell.isDataCell) {\n                        var footerTemplate = !isNullOrUndefined(cell.column.footerTemplate);\n                        var groupFooterTemplate = !isNullOrUndefined(cell.column.groupFooterTemplate);\n                        var groupCaptionTemplate = !isNullOrUndefined(cell.column.groupCaptionTemplate);\n                        eCell.index = index + indent + gObj.childGridLevel;\n                        if (footerTemplate) {\n                            eCell.value = this.getAggreateValue(CellType.Summary, cell.column.footerTemplate, cell, row);\n                        }\n                        else if (groupFooterTemplate) {\n                            eCell.value = this.getAggreateValue(CellType.GroupSummary, cell.column.groupFooterTemplate, cell, row);\n                        }\n                        else if (groupCaptionTemplate) {\n                            eCell.value = this.getAggreateValue(CellType.CaptionSummary, cell.column.groupCaptionTemplate, cell, row);\n                        }\n                        else {\n                            for (var _c = 0, _d = Object.keys(row.data[cell.column.field]); _c < _d.length; _c++) {\n                                var key = _d[_c];\n                                if (key === cell.column.type) {\n                                    if (!isNullOrUndefined(row.data[cell.column.field].Sum)) {\n                                        eCell.value = row.data[cell.column.field][cell.column.field + \" - sum\"];\n                                    }\n                                    else if (!isNullOrUndefined(row.data[cell.column.field].Average)) {\n                                        eCell.value = row.data[cell.column.field][cell.column.field + \" - average\"];\n                                    }\n                                    else if (!isNullOrUndefined(row.data[cell.column.field].Max)) {\n                                        eCell.value = row.data[cell.column.field][cell.column.field + \" - max\"];\n                                    }\n                                    else if (!isNullOrUndefined(row.data[cell.column.field].Min)) {\n                                        eCell.value = row.data[cell.column.field][cell.column.field + \" - min\"];\n                                    }\n                                    else if (!isNullOrUndefined(row.data[cell.column.field].Count)) {\n                                        eCell.value = row.data[cell.column.field][cell.column.field + \" - count\"];\n                                    }\n                                    else if (!isNullOrUndefined(row.data[cell.column.field].TrueCount)) {\n                                        eCell.value = row.data[cell.column.field][cell.column.field + \" - truecount\"];\n                                    }\n                                    else if (!isNullOrUndefined(row.data[cell.column.field].FalseCount)) {\n                                        eCell.value = row.data[cell.column.field][cell.column.field + \" - falsecount\"];\n                                    }\n                                    else if (!isNullOrUndefined(row.data[cell.column.field].Custom)) {\n                                        eCell.value = row.data[cell.column.field].Custom;\n                                    }\n                                }\n                            }\n                        }\n                        eCell.style = this.getCaptionThemeStyle(this.theme); //{ name: gObj.element.id + 'column' + index };\n                        this.aggregateStyle(cell.column, eCell.style, cell.column.field);\n                        var gridCellStyle = cell.attributes.style;\n                        if (gridCellStyle.textAlign) {\n                            eCell.style.hAlign = gridCellStyle.textAlign.toLowerCase();\n                        }\n                        var args = {\n                            row: row,\n                            type: footerTemplate ? AggregateTemplateType.Footer : groupFooterTemplate ?\n                                AggregateTemplateType.GroupFooter : AggregateTemplateType.GroupCaption,\n                            style: eCell\n                        };\n                        this.parent.trigger(events.excelAggregateQueryCellInfo, args);\n                        cells.push(eCell);\n                    }\n                    else {\n                        if (customIndex === undefined) {\n                            eCell.index = index + indent + gObj.childGridLevel;\n                            eCell.style = this.getCaptionThemeStyle(this.theme); //{ name: gObj.element.id + 'column' + index };\n                            cells.push(eCell);\n                        }\n                    }\n                }\n            }\n            if (!isNullOrUndefined(customIndex)) {\n                excelRows.push({ index: customIndex, cells: cells });\n            }\n            else {\n                var row_1 = {};\n                if (this.groupedColLength < 8 && this.groupedColLength > 0) {\n                    var dummyOutlineLevel = 'outlineLevel';\n                    var dummyGrouping = 'grouping';\n                    var level = excelRows[excelRows.length - 1][dummyGrouping][dummyOutlineLevel];\n                    var grouping = { outlineLevel: level, isCollapsed: true };\n                    row_1 = { index: this.rowLength++, cells: cells, grouping: grouping };\n                }\n                else {\n                    row_1 = { index: this.rowLength++, cells: cells };\n                }\n                excelRows.push(row_1);\n            }\n        }\n        return excelRows;\n    };\n    ExcelExport.prototype.aggregateStyle = function (col, style, field) {\n        var column = this.parent.getColumnByField(field);\n        if (typeof col.format === 'object') {\n            var format = col.format;\n            style.numberFormat = !isNullOrUndefined(format.format) ? format.format : format.skeleton;\n            if (!isNullOrUndefined(format.type)) {\n                style.type = format.type.toLowerCase();\n            }\n        }\n        else {\n            style.numberFormat = col.format;\n        }\n        if (!isNullOrUndefined(column) && isNullOrUndefined(style.type)) {\n            style.type = column.type.toLowerCase();\n        }\n    };\n    ExcelExport.prototype.getAggreateValue = function (cellType, template, cell, row) {\n        var templateFn = {};\n        templateFn[getEnumValue(CellType, cell.cellType)] = compile(template);\n        /* tslint:disable-next-line:max-line-length */\n        var txt = (templateFn[getEnumValue(CellType, cell.cellType)](row.data[cell.column.field ? cell.column.field : cell.column.columnName]));\n        return txt[0].textContent;\n    };\n    ExcelExport.prototype.mergeOptions = function (JSON1, JSON2) {\n        var result = {};\n        var attrname = Object.keys(JSON1);\n        for (var index = 0; index < attrname.length; index++) {\n            if (attrname[index] !== 'name') {\n                result[attrname[index]] = JSON1[attrname[index]];\n            }\n        }\n        attrname = Object.keys(JSON2);\n        for (var index = 0; index < attrname.length; index++) {\n            if (attrname[index] !== 'name') {\n                result[attrname[index]] = JSON2[attrname[index]];\n            }\n        }\n        return result;\n    };\n    ExcelExport.prototype.getColumnStyle = function (gObj, columnIndex) {\n        var index = 0;\n        for (var _i = 0, _a = this.styles; _i < _a.length; _i++) {\n            var style = _a[_i];\n            if (style.name === gObj.element.id + 'column' + columnIndex) {\n                return index;\n            }\n            index++;\n        }\n        return undefined;\n    };\n    ExcelExport.prototype.processHeaderContent = function (gObj, headerRow, indent, excelRows) {\n        var rowIndex = 1;\n        var gridRows = headerRow.rows;\n        // Column collection with respect to the records in the grid\n        var gridColumns = headerRow.columns;\n        var spannedCells = [];\n        if (indent > 0) {\n            var index = 0;\n            while (index !== indent) {\n                this.columns.push({ index: index + 1, width: 30 });\n                index++;\n            }\n        }\n        for (var row = 0; row < gridRows.length; row++) {\n            var currentCellIndex = 1 + indent;\n            var cells = [];\n            for (var column = 0; column < gridRows[row].cells.length; column++) {\n                /* tslint:disable-next-line:no-any */\n                var style = {};\n                var cell = {};\n                var gridCell = gridRows[row].cells[column];\n                if (gridCell.cellType === CellType.HeaderIndent || gridCell.cellType === CellType.DetailHeader) {\n                    continue;\n                }\n                var result = { contains: true, index: 1 };\n                while (result.contains) {\n                    result = this.getIndex(spannedCells, rowIndex, currentCellIndex);\n                    currentCellIndex = result.index;\n                    if (!result.contains) {\n                        cell.index = result.index + gObj.childGridLevel;\n                        break;\n                    }\n                }\n                if (!isNullOrUndefined(gridCell.rowSpan) && gridCell.rowSpan !== 1) {\n                    cell.rowSpan = gridCell.rowSpan;\n                    for (var i = rowIndex; i < gridCell.rowSpan + rowIndex; i++) {\n                        var spannedCell = { rowIndex: 0, columnIndex: 0 };\n                        spannedCell.rowIndex = i;\n                        spannedCell.columnIndex = currentCellIndex;\n                        spannedCells.push(spannedCell);\n                    }\n                }\n                if (!isNullOrUndefined(gridCell.colSpan) && gridCell.colSpan !== 1) {\n                    cell.colSpan = gridCell.colSpan;\n                    currentCellIndex = currentCellIndex + cell.colSpan - 1;\n                }\n                cell.value = gridCell.column.headerText;\n                style = this.getHeaderThemeStyle(this.theme);\n                if (!isNullOrUndefined(gridCell.column.textAlign)) {\n                    style.hAlign = gridCell.column.textAlign.toLowerCase();\n                }\n                if (!isNullOrUndefined(gridCell.column.headerTextAlign)) {\n                    style.hAlign = gridCell.column.headerTextAlign.toLowerCase();\n                }\n                var excelHeaderCellArgs = { cell: cell, gridCell: gridCell, style: style };\n                gObj.trigger(events.excelHeaderQueryCellInfo, excelHeaderCellArgs);\n                cell.style = excelHeaderCellArgs.style;\n                cells.push(cell);\n                currentCellIndex++;\n            }\n            excelRows.push({ index: this.rowLength++, cells: cells });\n        }\n        for (var col = 0; col < gridColumns.length; col++) {\n            this.parseStyles(gObj, gridColumns[col], this.getRecordThemeStyle(this.theme), indent + col + 1);\n        }\n        return excelRows;\n    };\n    ExcelExport.prototype.getHeaderThemeStyle = function (theme) {\n        var style = {};\n        style.fontSize = 12;\n        style.borders = { color: '#E0E0E0' };\n        style.bold = true;\n        if (!isNullOrUndefined(theme) && !isNullOrUndefined(theme.header)) {\n            style = this.updateThemeStyle(theme.header, style);\n        }\n        return style;\n    };\n    ExcelExport.prototype.updateThemeStyle = function (themestyle, style) {\n        return extend(style, themestyle);\n    };\n    ExcelExport.prototype.getCaptionThemeStyle = function (theme) {\n        var style = {};\n        style.fontSize = 13;\n        style.backColor = '#F6F6F6';\n        if (!isNullOrUndefined(theme) && !isNullOrUndefined(theme.caption)) {\n            style = this.updateThemeStyle(theme.caption, style);\n        }\n        return style;\n    };\n    ExcelExport.prototype.getRecordThemeStyle = function (theme) {\n        var style = {};\n        style.fontSize = 13;\n        style.borders = { color: '#E0E0E0' };\n        if (!isNullOrUndefined(theme) && !isNullOrUndefined(theme.record)) {\n            style = this.updateThemeStyle(theme.record, style);\n        }\n        return style;\n    };\n    ExcelExport.prototype.processExcelHeader = function (header) {\n        if (!isNullOrUndefined(header.rows) && (this.expType === 'NewSheet' || this.rowLength === 1)) {\n            var noRows = void 0;\n            if (header.headerRows === undefined) {\n                this.rowLength = header.rows.length;\n            }\n            else {\n                this.rowLength = header.headerRows;\n            }\n            if (this.rowLength < header.rows.length) {\n                noRows = this.rowLength;\n            }\n            else {\n                noRows = header.rows.length;\n            }\n            this.rowLength++;\n            for (var row = 0; row < noRows; row++) {\n                var json = header.rows[row];\n                //Row index\n                if (!(json.index !== null && !isNullOrUndefined(json.index))) {\n                    json.index = (row + 1);\n                }\n                this.updatedCellIndex(json);\n            }\n        }\n    };\n    ExcelExport.prototype.updatedCellIndex = function (json) {\n        var cellsLength = json.cells.length;\n        for (var cellId = 0; cellId < cellsLength; cellId++) {\n            var jsonCell = json.cells[cellId];\n            //cell index\n            if (!(jsonCell.index !== null && !isNullOrUndefined(jsonCell.index))) {\n                jsonCell.index = (cellId + 1);\n            }\n        }\n        this.rows.push(json);\n    };\n    ExcelExport.prototype.processExcelFooter = function (footer) {\n        if (!isNullOrUndefined(footer.rows)) {\n            var noRows = void 0;\n            if (footer.footerRows === undefined) {\n                this.rowLength += footer.rows.length;\n            }\n            else {\n                if (footer.footerRows > footer.rows.length) {\n                    this.rowLength += (footer.footerRows - footer.rows.length);\n                    noRows = footer.rows.length;\n                }\n                else {\n                    noRows = footer.footerRows;\n                }\n            }\n            for (var row = 0; row < noRows; row++) {\n                var json = footer.rows[row];\n                //Row index\n                if (json.index === null || json.index === undefined) {\n                    json.index = this.rowLength++;\n                }\n                else {\n                    json.index += this.rowLength;\n                }\n                this.updatedCellIndex(json);\n            }\n        }\n    };\n    ExcelExport.prototype.getIndex = function (spannedCells, rowIndex, columnIndex) {\n        for (var _i = 0, spannedCells_1 = spannedCells; _i < spannedCells_1.length; _i++) {\n            var spannedCell = spannedCells_1[_i];\n            if ((spannedCell.rowIndex === rowIndex) && (spannedCell.columnIndex === columnIndex)) {\n                columnIndex = columnIndex + 1;\n                return { contains: true, index: columnIndex };\n            }\n        }\n        return { contains: false, index: columnIndex };\n    };\n    ExcelExport.prototype.parseStyles = function (gObj, col, style, index) {\n        if (!isNullOrUndefined(col.format)) {\n            if (typeof col.format === 'object') {\n                var format = col.format;\n                style.numberFormat = !isNullOrUndefined(format.format) ? format.format : format.skeleton;\n                if (!isNullOrUndefined(format.type)) {\n                    style.type = format.type.toLowerCase();\n                }\n            }\n            else {\n                style.numberFormat = col.format;\n                style.type = col.type;\n            }\n        }\n        if (!isNullOrUndefined(col.textAlign)) {\n            style.hAlign = col.textAlign.toLowerCase();\n        }\n        if (Object.keys(style).length > 0) {\n            style.name = gObj.element.id + 'column' + index;\n            this.styles.push(style);\n        }\n        if (!isNullOrUndefined(col.width)) {\n            this.columns.push({ index: index + gObj.childGridLevel, width: typeof col.width === 'number' ?\n                    col.width : this.helper.getConvertedWidth(col.width) });\n        }\n    };\n    /**\n     * To destroy the excel export\n     * @return {void}\n     * @hidden\n     */\n    ExcelExport.prototype.destroy = function () {\n        //destroy for exporting\n    };\n    return ExcelExport;\n}());\nexport { ExcelExport };\n"]},"metadata":{},"sourceType":"module"}